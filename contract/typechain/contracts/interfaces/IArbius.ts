/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IArbius {
  export type ContestationStruct = {
    validator: PromiseOrValue<string>;
    blocktime: PromiseOrValue<BigNumberish>;
    finish_start_index: PromiseOrValue<BigNumberish>;
  };

  export type ContestationStructOutput = [string, BigNumber, number] & {
    validator: string;
    blocktime: BigNumber;
    finish_start_index: number;
  };

  export type ModelStruct = {
    fee: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<string>;
    rate: PromiseOrValue<BigNumberish>;
    cid: PromiseOrValue<BytesLike>;
  };

  export type ModelStructOutput = [BigNumber, string, BigNumber, string] & {
    fee: BigNumber;
    addr: string;
    rate: BigNumber;
    cid: string;
  };

  export type TaskStruct = {
    model: PromiseOrValue<BytesLike>;
    fee: PromiseOrValue<BigNumberish>;
    owner: PromiseOrValue<string>;
    blocktime: PromiseOrValue<BigNumberish>;
    version: PromiseOrValue<BigNumberish>;
    cid: PromiseOrValue<BytesLike>;
  };

  export type TaskStructOutput = [
    string,
    BigNumber,
    string,
    BigNumber,
    number,
    string
  ] & {
    model: string;
    fee: BigNumber;
    owner: string;
    blocktime: BigNumber;
    version: number;
    cid: string;
  };

  export type PendingValidatorWithdrawRequestStruct = {
    unlockTime: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type PendingValidatorWithdrawRequestStructOutput = [
    BigNumber,
    BigNumber
  ] & { unlockTime: BigNumber; amount: BigNumber };

  export type SolutionStruct = {
    validator: PromiseOrValue<string>;
    blocktime: PromiseOrValue<BigNumberish>;
    claimed: PromiseOrValue<boolean>;
    cid: PromiseOrValue<BytesLike>;
  };

  export type SolutionStructOutput = [string, BigNumber, boolean, string] & {
    validator: string;
    blocktime: BigNumber;
    claimed: boolean;
    cid: string;
  };

  export type ValidatorStruct = {
    staked: PromiseOrValue<BigNumberish>;
    since: PromiseOrValue<BigNumberish>;
    addr: PromiseOrValue<string>;
  };

  export type ValidatorStructOutput = [BigNumber, BigNumber, string] & {
    staked: BigNumber;
    since: BigNumber;
    addr: string;
  };
}

export interface IArbiusInterface extends utils.Interface {
  functions: {
    "accruedFees()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "cancelValidatorWithdraw(uint256)": FunctionFragment;
    "claimSolution(bytes32)": FunctionFragment;
    "commitments(bytes32)": FunctionFragment;
    "contestationVoteFinish(bytes32,uint32)": FunctionFragment;
    "contestationVoteNays(bytes32,uint256)": FunctionFragment;
    "contestationVoteYeas(bytes32,uint256)": FunctionFragment;
    "contestationVoted(bytes32,address)": FunctionFragment;
    "contestationVotedIndex(bytes32)": FunctionFragment;
    "contestations(bytes32)": FunctionFragment;
    "diffMul(uint256,uint256)": FunctionFragment;
    "exitValidatorMinUnlockTime()": FunctionFragment;
    "generateCommitment(address,bytes32,bytes)": FunctionFragment;
    "generateIPFSCID(bytes)": FunctionFragment;
    "getReward()": FunctionFragment;
    "getSlashAmount()": FunctionFragment;
    "getValidatorMinimum()": FunctionFragment;
    "hashModel((uint256,address,uint256,bytes),address)": FunctionFragment;
    "hashTask((bytes32,uint256,address,uint64,uint8,bytes),address,bytes32)": FunctionFragment;
    "initiateValidatorWithdraw(uint256)": FunctionFragment;
    "maxContestationValidatorStakeSince()": FunctionFragment;
    "minClaimSolutionTime()": FunctionFragment;
    "minContestationVotePeriodTime()": FunctionFragment;
    "minRetractionWaitTime()": FunctionFragment;
    "models(bytes32)": FunctionFragment;
    "paused()": FunctionFragment;
    "pauser()": FunctionFragment;
    "pendingValidatorWithdrawRequests(address,uint256)": FunctionFragment;
    "pendingValidatorWithdrawRequestsCount(address)": FunctionFragment;
    "prevhash()": FunctionFragment;
    "registerModel(address,uint256,bytes)": FunctionFragment;
    "retractTask(bytes32)": FunctionFragment;
    "retractionFeePercentage()": FunctionFragment;
    "reward(uint256,uint256)": FunctionFragment;
    "setMaxContestationValidatorStakeSince(uint256)": FunctionFragment;
    "setMinClaimSolutionTime(uint256)": FunctionFragment;
    "setMinContestationVotePeriodTime(uint256)": FunctionFragment;
    "setMinRetractionWaitTime(uint256)": FunctionFragment;
    "setPaused(bool)": FunctionFragment;
    "setRetractionFeePercentage(uint256)": FunctionFragment;
    "setSlashAmountPercentage(uint256)": FunctionFragment;
    "setSolutionFeePercentage(uint256)": FunctionFragment;
    "setSolutionMineableStatus(bytes32,uint256)": FunctionFragment;
    "setTreasuryRewardPercentage(uint256)": FunctionFragment;
    "setValidatorMinimumPercentage(uint256)": FunctionFragment;
    "setVersion(uint256)": FunctionFragment;
    "signalCommitment(bytes32)": FunctionFragment;
    "signalSupport(bytes32,bool)": FunctionFragment;
    "slashAmountPercentage()": FunctionFragment;
    "solutionFeePercentage()": FunctionFragment;
    "solutions(bytes32)": FunctionFragment;
    "startBlockTime()": FunctionFragment;
    "submitContestation(bytes32)": FunctionFragment;
    "submitSolution(bytes32,bytes)": FunctionFragment;
    "submitTask(uint8,address,bytes32,uint256,bytes)": FunctionFragment;
    "targetTs(uint256)": FunctionFragment;
    "tasks(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferPauser(address)": FunctionFragment;
    "transferTreasury(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "treasuryRewardPercentage()": FunctionFragment;
    "validatorCanVote(address,bytes32)": FunctionFragment;
    "validatorDeposit(address,uint256)": FunctionFragment;
    "validatorMinimumPercentage()": FunctionFragment;
    "validatorWithdraw(uint256,address)": FunctionFragment;
    "validatorWithdrawPendingAmount(address)": FunctionFragment;
    "validators(address)": FunctionFragment;
    "version()": FunctionFragment;
    "voteOnContestation(bytes32,bool)": FunctionFragment;
    "withdrawAccruedFees()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accruedFees"
      | "baseToken"
      | "cancelValidatorWithdraw"
      | "claimSolution"
      | "commitments"
      | "contestationVoteFinish"
      | "contestationVoteNays"
      | "contestationVoteYeas"
      | "contestationVoted"
      | "contestationVotedIndex"
      | "contestations"
      | "diffMul"
      | "exitValidatorMinUnlockTime"
      | "generateCommitment"
      | "generateIPFSCID"
      | "getReward"
      | "getSlashAmount"
      | "getValidatorMinimum"
      | "hashModel"
      | "hashTask"
      | "initiateValidatorWithdraw"
      | "maxContestationValidatorStakeSince"
      | "minClaimSolutionTime"
      | "minContestationVotePeriodTime"
      | "minRetractionWaitTime"
      | "models"
      | "paused"
      | "pauser"
      | "pendingValidatorWithdrawRequests"
      | "pendingValidatorWithdrawRequestsCount"
      | "prevhash"
      | "registerModel"
      | "retractTask"
      | "retractionFeePercentage"
      | "reward"
      | "setMaxContestationValidatorStakeSince"
      | "setMinClaimSolutionTime"
      | "setMinContestationVotePeriodTime"
      | "setMinRetractionWaitTime"
      | "setPaused"
      | "setRetractionFeePercentage"
      | "setSlashAmountPercentage"
      | "setSolutionFeePercentage"
      | "setSolutionMineableStatus"
      | "setTreasuryRewardPercentage"
      | "setValidatorMinimumPercentage"
      | "setVersion"
      | "signalCommitment"
      | "signalSupport"
      | "slashAmountPercentage"
      | "solutionFeePercentage"
      | "solutions"
      | "startBlockTime"
      | "submitContestation"
      | "submitSolution"
      | "submitTask"
      | "targetTs"
      | "tasks"
      | "transferOwnership"
      | "transferPauser"
      | "transferTreasury"
      | "treasury"
      | "treasuryRewardPercentage"
      | "validatorCanVote"
      | "validatorDeposit"
      | "validatorMinimumPercentage"
      | "validatorWithdraw"
      | "validatorWithdrawPendingAmount"
      | "validators"
      | "version"
      | "voteOnContestation"
      | "withdrawAccruedFees"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accruedFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelValidatorWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSolution",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteFinish",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteNays",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteYeas",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoted",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVotedIndex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contestations",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "diffMul",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "exitValidatorMinUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateCommitment",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "generateIPFSCID",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSlashAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorMinimum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashModel",
    values: [IArbius.ModelStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTask",
    values: [
      IArbius.TaskStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateValidatorWithdraw",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "maxContestationValidatorStakeSince",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minClaimSolutionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minContestationVotePeriodTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRetractionWaitTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "models",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pauser", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorWithdrawRequests",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorWithdrawRequestsCount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "prevhash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerModel",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "retractTask",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "retractionFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxContestationValidatorStakeSince",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinClaimSolutionTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinContestationVotePeriodTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRetractionWaitTime",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaused",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRetractionFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlashAmountPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolutionFeePercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolutionMineableStatus",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryRewardPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorMinimumPercentage",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalCommitment",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSupport",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "slashAmountPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solutionFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solutions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitContestation",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSolution",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTask",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "targetTs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "tasks",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferPauser",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTreasury",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorCanVote",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorDeposit",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorMinimumPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorWithdraw",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorWithdrawPendingAmount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteOnContestation",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAccruedFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accruedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelValidatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteNays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteYeas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVotedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diffMul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitValidatorMinUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateIPFSCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSlashAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashTask", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateValidatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "maxContestationValidatorStakeSince",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minClaimSolutionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minContestationVotePeriodTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRetractionWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "models", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauser", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorWithdrawRequestsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prevhash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retractTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retractionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMaxContestationValidatorStakeSince",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinClaimSolutionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinContestationVotePeriodTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRetractionWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setPaused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRetractionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlashAmountPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSolutionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSolutionMineableStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorMinimumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashAmountPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solutionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solutions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitContestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "targetTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferPauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorCanVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorMinimumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorWithdrawPendingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnContestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAccruedFees",
    data: BytesLike
  ): Result;

  events: {
    "ContestationSubmitted(address,bytes32)": EventFragment;
    "ContestationVote(address,bytes32,bool)": EventFragment;
    "ContestationVoteFinish(bytes32,uint32,uint32)": EventFragment;
    "ExitValidatorMinUnlockTimeChanged(uint256)": EventFragment;
    "MinClaimSolutionTimeChanged(uint256)": EventFragment;
    "MinContestationVotePeriodTimeChanged(uint256)": EventFragment;
    "MinRetractionWaitTimeChanged(uint256)": EventFragment;
    "ModelRegistered(bytes32)": EventFragment;
    "PausedChanged(bool)": EventFragment;
    "PauserTransferred(address)": EventFragment;
    "RetractionFeePercentageChanged(uint256)": EventFragment;
    "SignalCommitment(address,bytes32)": EventFragment;
    "SignalSupport(address,bytes32,bool)": EventFragment;
    "SlashAmountPercentageChanged(uint256)": EventFragment;
    "SolutionClaimed(address,bytes32)": EventFragment;
    "SolutionFeePercentageChanged(uint256)": EventFragment;
    "SolutionMineableRateChange(bytes32,uint256)": EventFragment;
    "SolutionSubmitted(address,bytes32)": EventFragment;
    "TaskRetracted(bytes32)": EventFragment;
    "TaskSubmitted(bytes32,bytes32,uint256,address)": EventFragment;
    "TreasuryRewardPercentageChanged(uint256)": EventFragment;
    "TreasuryTransferred(address)": EventFragment;
    "ValidatorDeposit(address,address,uint256)": EventFragment;
    "ValidatorMinimumPercentageChanged(uint256)": EventFragment;
    "ValidatorWithdraw(address,address,uint256,uint256)": EventFragment;
    "ValidatorWithdrawCancelled(address,uint256)": EventFragment;
    "ValidatorWithdrawInitiated(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContestationSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestationVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestationVoteFinish"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExitValidatorMinUnlockTimeChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinClaimSolutionTimeChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinContestationVotePeriodTimeChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinRetractionWaitTimeChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModelRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausedChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PauserTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RetractionFeePercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalCommitment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSupport"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SlashAmountPercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolutionClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SolutionFeePercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolutionMineableRateChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolutionSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskRetracted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskSubmitted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TreasuryRewardPercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorDeposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorMinimumPercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorWithdrawCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorWithdrawInitiated"): EventFragment;
}

export interface ContestationSubmittedEventObject {
  addr: string;
  task: string;
}
export type ContestationSubmittedEvent = TypedEvent<
  [string, string],
  ContestationSubmittedEventObject
>;

export type ContestationSubmittedEventFilter =
  TypedEventFilter<ContestationSubmittedEvent>;

export interface ContestationVoteEventObject {
  addr: string;
  task: string;
  yea: boolean;
}
export type ContestationVoteEvent = TypedEvent<
  [string, string, boolean],
  ContestationVoteEventObject
>;

export type ContestationVoteEventFilter =
  TypedEventFilter<ContestationVoteEvent>;

export interface ContestationVoteFinishEventObject {
  id: string;
  start_idx: number;
  end_idx: number;
}
export type ContestationVoteFinishEvent = TypedEvent<
  [string, number, number],
  ContestationVoteFinishEventObject
>;

export type ContestationVoteFinishEventFilter =
  TypedEventFilter<ContestationVoteFinishEvent>;

export interface ExitValidatorMinUnlockTimeChangedEventObject {
  amount: BigNumber;
}
export type ExitValidatorMinUnlockTimeChangedEvent = TypedEvent<
  [BigNumber],
  ExitValidatorMinUnlockTimeChangedEventObject
>;

export type ExitValidatorMinUnlockTimeChangedEventFilter =
  TypedEventFilter<ExitValidatorMinUnlockTimeChangedEvent>;

export interface MinClaimSolutionTimeChangedEventObject {
  amount: BigNumber;
}
export type MinClaimSolutionTimeChangedEvent = TypedEvent<
  [BigNumber],
  MinClaimSolutionTimeChangedEventObject
>;

export type MinClaimSolutionTimeChangedEventFilter =
  TypedEventFilter<MinClaimSolutionTimeChangedEvent>;

export interface MinContestationVotePeriodTimeChangedEventObject {
  amount: BigNumber;
}
export type MinContestationVotePeriodTimeChangedEvent = TypedEvent<
  [BigNumber],
  MinContestationVotePeriodTimeChangedEventObject
>;

export type MinContestationVotePeriodTimeChangedEventFilter =
  TypedEventFilter<MinContestationVotePeriodTimeChangedEvent>;

export interface MinRetractionWaitTimeChangedEventObject {
  amount: BigNumber;
}
export type MinRetractionWaitTimeChangedEvent = TypedEvent<
  [BigNumber],
  MinRetractionWaitTimeChangedEventObject
>;

export type MinRetractionWaitTimeChangedEventFilter =
  TypedEventFilter<MinRetractionWaitTimeChangedEvent>;

export interface ModelRegisteredEventObject {
  id: string;
}
export type ModelRegisteredEvent = TypedEvent<
  [string],
  ModelRegisteredEventObject
>;

export type ModelRegisteredEventFilter = TypedEventFilter<ModelRegisteredEvent>;

export interface PausedChangedEventObject {
  paused: boolean;
}
export type PausedChangedEvent = TypedEvent<
  [boolean],
  PausedChangedEventObject
>;

export type PausedChangedEventFilter = TypedEventFilter<PausedChangedEvent>;

export interface PauserTransferredEventObject {
  to: string;
}
export type PauserTransferredEvent = TypedEvent<
  [string],
  PauserTransferredEventObject
>;

export type PauserTransferredEventFilter =
  TypedEventFilter<PauserTransferredEvent>;

export interface RetractionFeePercentageChangedEventObject {
  amount: BigNumber;
}
export type RetractionFeePercentageChangedEvent = TypedEvent<
  [BigNumber],
  RetractionFeePercentageChangedEventObject
>;

export type RetractionFeePercentageChangedEventFilter =
  TypedEventFilter<RetractionFeePercentageChangedEvent>;

export interface SignalCommitmentEventObject {
  addr: string;
  commitment: string;
}
export type SignalCommitmentEvent = TypedEvent<
  [string, string],
  SignalCommitmentEventObject
>;

export type SignalCommitmentEventFilter =
  TypedEventFilter<SignalCommitmentEvent>;

export interface SignalSupportEventObject {
  addr: string;
  model: string;
  supported: boolean;
}
export type SignalSupportEvent = TypedEvent<
  [string, string, boolean],
  SignalSupportEventObject
>;

export type SignalSupportEventFilter = TypedEventFilter<SignalSupportEvent>;

export interface SlashAmountPercentageChangedEventObject {
  amount: BigNumber;
}
export type SlashAmountPercentageChangedEvent = TypedEvent<
  [BigNumber],
  SlashAmountPercentageChangedEventObject
>;

export type SlashAmountPercentageChangedEventFilter =
  TypedEventFilter<SlashAmountPercentageChangedEvent>;

export interface SolutionClaimedEventObject {
  addr: string;
  task: string;
}
export type SolutionClaimedEvent = TypedEvent<
  [string, string],
  SolutionClaimedEventObject
>;

export type SolutionClaimedEventFilter = TypedEventFilter<SolutionClaimedEvent>;

export interface SolutionFeePercentageChangedEventObject {
  amount: BigNumber;
}
export type SolutionFeePercentageChangedEvent = TypedEvent<
  [BigNumber],
  SolutionFeePercentageChangedEventObject
>;

export type SolutionFeePercentageChangedEventFilter =
  TypedEventFilter<SolutionFeePercentageChangedEvent>;

export interface SolutionMineableRateChangeEventObject {
  id: string;
  rate: BigNumber;
}
export type SolutionMineableRateChangeEvent = TypedEvent<
  [string, BigNumber],
  SolutionMineableRateChangeEventObject
>;

export type SolutionMineableRateChangeEventFilter =
  TypedEventFilter<SolutionMineableRateChangeEvent>;

export interface SolutionSubmittedEventObject {
  addr: string;
  task: string;
}
export type SolutionSubmittedEvent = TypedEvent<
  [string, string],
  SolutionSubmittedEventObject
>;

export type SolutionSubmittedEventFilter =
  TypedEventFilter<SolutionSubmittedEvent>;

export interface TaskRetractedEventObject {
  id: string;
}
export type TaskRetractedEvent = TypedEvent<[string], TaskRetractedEventObject>;

export type TaskRetractedEventFilter = TypedEventFilter<TaskRetractedEvent>;

export interface TaskSubmittedEventObject {
  id: string;
  model: string;
  fee: BigNumber;
  sender: string;
}
export type TaskSubmittedEvent = TypedEvent<
  [string, string, BigNumber, string],
  TaskSubmittedEventObject
>;

export type TaskSubmittedEventFilter = TypedEventFilter<TaskSubmittedEvent>;

export interface TreasuryRewardPercentageChangedEventObject {
  amount: BigNumber;
}
export type TreasuryRewardPercentageChangedEvent = TypedEvent<
  [BigNumber],
  TreasuryRewardPercentageChangedEventObject
>;

export type TreasuryRewardPercentageChangedEventFilter =
  TypedEventFilter<TreasuryRewardPercentageChangedEvent>;

export interface TreasuryTransferredEventObject {
  to: string;
}
export type TreasuryTransferredEvent = TypedEvent<
  [string],
  TreasuryTransferredEventObject
>;

export type TreasuryTransferredEventFilter =
  TypedEventFilter<TreasuryTransferredEvent>;

export interface ValidatorDepositEventObject {
  addr: string;
  validator: string;
  amount: BigNumber;
}
export type ValidatorDepositEvent = TypedEvent<
  [string, string, BigNumber],
  ValidatorDepositEventObject
>;

export type ValidatorDepositEventFilter =
  TypedEventFilter<ValidatorDepositEvent>;

export interface ValidatorMinimumPercentageChangedEventObject {
  amount: BigNumber;
}
export type ValidatorMinimumPercentageChangedEvent = TypedEvent<
  [BigNumber],
  ValidatorMinimumPercentageChangedEventObject
>;

export type ValidatorMinimumPercentageChangedEventFilter =
  TypedEventFilter<ValidatorMinimumPercentageChangedEvent>;

export interface ValidatorWithdrawEventObject {
  addr: string;
  to: string;
  count: BigNumber;
  amount: BigNumber;
}
export type ValidatorWithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  ValidatorWithdrawEventObject
>;

export type ValidatorWithdrawEventFilter =
  TypedEventFilter<ValidatorWithdrawEvent>;

export interface ValidatorWithdrawCancelledEventObject {
  addr: string;
  count: BigNumber;
}
export type ValidatorWithdrawCancelledEvent = TypedEvent<
  [string, BigNumber],
  ValidatorWithdrawCancelledEventObject
>;

export type ValidatorWithdrawCancelledEventFilter =
  TypedEventFilter<ValidatorWithdrawCancelledEvent>;

export interface ValidatorWithdrawInitiatedEventObject {
  addr: string;
  count: BigNumber;
  unlockTime: BigNumber;
  amount: BigNumber;
}
export type ValidatorWithdrawInitiatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ValidatorWithdrawInitiatedEventObject
>;

export type ValidatorWithdrawInitiatedEventFilter =
  TypedEventFilter<ValidatorWithdrawInitiatedEvent>;

export interface IArbius extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IArbiusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accruedFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    cancelValidatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimSolution(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    commitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contestationVoteFinish(
      taskid_: PromiseOrValue<BytesLike>,
      amnt_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contestationVoteNays(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contestationVoteYeas(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contestationVoted(
      taskid: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contestationVotedIndex(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contestations(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IArbius.ContestationStructOutput]>;

    diffMul(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    generateCommitment(
      sender_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateIPFSCID(
      content_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSlashAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidatorMinimum(overrides?: CallOverrides): Promise<[BigNumber]>;

    hashModel(
      o_: IArbius.ModelStruct,
      sender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashTask(
      o_: IArbius.TaskStruct,
      sender_: PromiseOrValue<string>,
      prevhash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initiateValidatorWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxContestationValidatorStakeSince(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minClaimSolutionTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minRetractionWaitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    models(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IArbius.ModelStructOutput]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    pendingValidatorWithdrawRequests(
      addr: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[IArbius.PendingValidatorWithdrawRequestStructOutput]>;

    pendingValidatorWithdrawRequestsCount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    prevhash(overrides?: CallOverrides): Promise<[string]>;

    registerModel(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retractTask(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    retractionFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setMaxContestationValidatorStakeSince(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinClaimSolutionTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinContestationVotePeriodTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinRetractionWaitTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaused(
      paused_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRetractionFeePercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSlashAmountPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSolutionFeePercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setSolutionMineableStatus(
      model_: PromiseOrValue<BytesLike>,
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTreasuryRewardPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setValidatorMinimumPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVersion(
      version_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalCommitment(
      commitment_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    signalSupport(
      model_: PromiseOrValue<BytesLike>,
      support_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    slashAmountPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    solutionFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    solutions(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IArbius.SolutionStructOutput]>;

    startBlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitSolution(
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    targetTs(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tasks(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IArbius.TaskStructOutput]>;

    transferOwnership(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferPauser(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferTreasury(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    treasuryRewardPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorCanVote(
      addr_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validatorDeposit(
      validator_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatorMinimumPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    validatorWithdrawPendingAmount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validators(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IArbius.ValidatorStructOutput]>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteOnContestation(
      taskid_: PromiseOrValue<BytesLike>,
      yea_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawAccruedFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  cancelValidatorWithdraw(
    count_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimSolution(
    taskid_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  commitments(
    commitment: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contestationVoteFinish(
    taskid_: PromiseOrValue<BytesLike>,
    amnt_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contestationVoteNays(
    taskid: PromiseOrValue<BytesLike>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contestationVoteYeas(
    taskid: PromiseOrValue<BytesLike>,
    idx: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contestationVoted(
    taskid: PromiseOrValue<BytesLike>,
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contestationVotedIndex(
    taskid: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contestations(
    taskid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IArbius.ContestationStructOutput>;

  diffMul(
    t: PromiseOrValue<BigNumberish>,
    ts: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  generateCommitment(
    sender_: PromiseOrValue<string>,
    taskid_: PromiseOrValue<BytesLike>,
    cid_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  generateIPFSCID(
    content_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getReward(overrides?: CallOverrides): Promise<BigNumber>;

  getSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getValidatorMinimum(overrides?: CallOverrides): Promise<BigNumber>;

  hashModel(
    o_: IArbius.ModelStruct,
    sender_: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  hashTask(
    o_: IArbius.TaskStruct,
    sender_: PromiseOrValue<string>,
    prevhash_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  initiateValidatorWithdraw(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxContestationValidatorStakeSince(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  minClaimSolutionTime(overrides?: CallOverrides): Promise<BigNumber>;

  minContestationVotePeriodTime(overrides?: CallOverrides): Promise<BigNumber>;

  minRetractionWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

  models(
    model: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IArbius.ModelStructOutput>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pauser(overrides?: CallOverrides): Promise<string>;

  pendingValidatorWithdrawRequests(
    addr: PromiseOrValue<string>,
    count: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<IArbius.PendingValidatorWithdrawRequestStructOutput>;

  pendingValidatorWithdrawRequestsCount(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prevhash(overrides?: CallOverrides): Promise<string>;

  registerModel(
    addr_: PromiseOrValue<string>,
    fee_: PromiseOrValue<BigNumberish>,
    template_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retractTask(
    taskid_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  retractionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  reward(
    t: PromiseOrValue<BigNumberish>,
    ts: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setMaxContestationValidatorStakeSince(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinClaimSolutionTime(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinContestationVotePeriodTime(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinRetractionWaitTime(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaused(
    paused_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRetractionFeePercentage(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSlashAmountPercentage(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSolutionFeePercentage(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setSolutionMineableStatus(
    model_: PromiseOrValue<BytesLike>,
    rate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTreasuryRewardPercentage(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setValidatorMinimumPercentage(
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVersion(
    version_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalCommitment(
    commitment_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  signalSupport(
    model_: PromiseOrValue<BytesLike>,
    support_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  slashAmountPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  solutionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  solutions(
    taskid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IArbius.SolutionStructOutput>;

  startBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  submitContestation(
    taskid_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitSolution(
    taskid_: PromiseOrValue<BytesLike>,
    cid_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitTask(
    version_: PromiseOrValue<BigNumberish>,
    owner_: PromiseOrValue<string>,
    model_: PromiseOrValue<BytesLike>,
    fee_: PromiseOrValue<BigNumberish>,
    input_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  targetTs(
    t: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tasks(
    taskid: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IArbius.TaskStructOutput>;

  transferOwnership(
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferPauser(
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferTreasury(
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  treasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  validatorCanVote(
    addr_: PromiseOrValue<string>,
    taskid_: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validatorDeposit(
    validator_: PromiseOrValue<string>,
    amount_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatorMinimumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  validatorWithdraw(
    count_: PromiseOrValue<BigNumberish>,
    to_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  validatorWithdrawPendingAmount(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validators(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IArbius.ValidatorStructOutput>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  voteOnContestation(
    taskid_: PromiseOrValue<BytesLike>,
    yea_: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawAccruedFees(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    cancelValidatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSolution(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    commitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoteFinish(
      taskid_: PromiseOrValue<BytesLike>,
      amnt_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contestationVoteNays(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    contestationVoteYeas(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    contestationVoted(
      taskid: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contestationVotedIndex(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestations(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IArbius.ContestationStructOutput>;

    diffMul(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    generateCommitment(
      sender_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    generateIPFSCID(
      content_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    getSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    hashModel(
      o_: IArbius.ModelStruct,
      sender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    hashTask(
      o_: IArbius.TaskStruct,
      sender_: PromiseOrValue<string>,
      prevhash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    initiateValidatorWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    maxContestationValidatorStakeSince(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minClaimSolutionTime(overrides?: CallOverrides): Promise<BigNumber>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minRetractionWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    models(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IArbius.ModelStructOutput>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pauser(overrides?: CallOverrides): Promise<string>;

    pendingValidatorWithdrawRequests(
      addr: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<IArbius.PendingValidatorWithdrawRequestStructOutput>;

    pendingValidatorWithdrawRequestsCount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevhash(overrides?: CallOverrides): Promise<string>;

    registerModel(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    retractTask(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    retractionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reward(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMaxContestationValidatorStakeSince(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinClaimSolutionTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinContestationVotePeriodTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRetractionWaitTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaused(
      paused_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRetractionFeePercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlashAmountPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolutionFeePercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolutionMineableStatus(
      model_: PromiseOrValue<BytesLike>,
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryRewardPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatorMinimumPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVersion(
      version_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalCommitment(
      commitment_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSupport(
      model_: PromiseOrValue<BytesLike>,
      support_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    slashAmountPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutions(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IArbius.SolutionStructOutput>;

    startBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitSolution(
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    targetTs(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tasks(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IArbius.TaskStructOutput>;

    transferOwnership(
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferPauser(
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferTreasury(
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    treasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorCanVote(
      addr_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorDeposit(
      validator_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorMinimumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorWithdrawPendingAmount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IArbius.ValidatorStructOutput>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voteOnContestation(
      taskid_: PromiseOrValue<BytesLike>,
      yea_: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAccruedFees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ContestationSubmitted(address,bytes32)"(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): ContestationSubmittedEventFilter;
    ContestationSubmitted(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): ContestationSubmittedEventFilter;

    "ContestationVote(address,bytes32,bool)"(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null,
      yea?: null
    ): ContestationVoteEventFilter;
    ContestationVote(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null,
      yea?: null
    ): ContestationVoteEventFilter;

    "ContestationVoteFinish(bytes32,uint32,uint32)"(
      id?: PromiseOrValue<BytesLike> | null,
      start_idx?: PromiseOrValue<BigNumberish> | null,
      end_idx?: null
    ): ContestationVoteFinishEventFilter;
    ContestationVoteFinish(
      id?: PromiseOrValue<BytesLike> | null,
      start_idx?: PromiseOrValue<BigNumberish> | null,
      end_idx?: null
    ): ContestationVoteFinishEventFilter;

    "ExitValidatorMinUnlockTimeChanged(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): ExitValidatorMinUnlockTimeChangedEventFilter;
    ExitValidatorMinUnlockTimeChanged(
      amount?: PromiseOrValue<BigNumberish> | null
    ): ExitValidatorMinUnlockTimeChangedEventFilter;

    "MinClaimSolutionTimeChanged(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): MinClaimSolutionTimeChangedEventFilter;
    MinClaimSolutionTimeChanged(
      amount?: PromiseOrValue<BigNumberish> | null
    ): MinClaimSolutionTimeChangedEventFilter;

    "MinContestationVotePeriodTimeChanged(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): MinContestationVotePeriodTimeChangedEventFilter;
    MinContestationVotePeriodTimeChanged(
      amount?: PromiseOrValue<BigNumberish> | null
    ): MinContestationVotePeriodTimeChangedEventFilter;

    "MinRetractionWaitTimeChanged(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): MinRetractionWaitTimeChangedEventFilter;
    MinRetractionWaitTimeChanged(
      amount?: PromiseOrValue<BigNumberish> | null
    ): MinRetractionWaitTimeChangedEventFilter;

    "ModelRegistered(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): ModelRegisteredEventFilter;
    ModelRegistered(
      id?: PromiseOrValue<BytesLike> | null
    ): ModelRegisteredEventFilter;

    "PausedChanged(bool)"(
      paused?: PromiseOrValue<boolean> | null
    ): PausedChangedEventFilter;
    PausedChanged(
      paused?: PromiseOrValue<boolean> | null
    ): PausedChangedEventFilter;

    "PauserTransferred(address)"(
      to?: PromiseOrValue<string> | null
    ): PauserTransferredEventFilter;
    PauserTransferred(
      to?: PromiseOrValue<string> | null
    ): PauserTransferredEventFilter;

    "RetractionFeePercentageChanged(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): RetractionFeePercentageChangedEventFilter;
    RetractionFeePercentageChanged(
      amount?: PromiseOrValue<BigNumberish> | null
    ): RetractionFeePercentageChangedEventFilter;

    "SignalCommitment(address,bytes32)"(
      addr?: PromiseOrValue<string> | null,
      commitment?: PromiseOrValue<BytesLike> | null
    ): SignalCommitmentEventFilter;
    SignalCommitment(
      addr?: PromiseOrValue<string> | null,
      commitment?: PromiseOrValue<BytesLike> | null
    ): SignalCommitmentEventFilter;

    "SignalSupport(address,bytes32,bool)"(
      addr?: PromiseOrValue<string> | null,
      model?: PromiseOrValue<BytesLike> | null,
      supported?: null
    ): SignalSupportEventFilter;
    SignalSupport(
      addr?: PromiseOrValue<string> | null,
      model?: PromiseOrValue<BytesLike> | null,
      supported?: null
    ): SignalSupportEventFilter;

    "SlashAmountPercentageChanged(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): SlashAmountPercentageChangedEventFilter;
    SlashAmountPercentageChanged(
      amount?: PromiseOrValue<BigNumberish> | null
    ): SlashAmountPercentageChangedEventFilter;

    "SolutionClaimed(address,bytes32)"(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): SolutionClaimedEventFilter;
    SolutionClaimed(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): SolutionClaimedEventFilter;

    "SolutionFeePercentageChanged(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): SolutionFeePercentageChangedEventFilter;
    SolutionFeePercentageChanged(
      amount?: PromiseOrValue<BigNumberish> | null
    ): SolutionFeePercentageChangedEventFilter;

    "SolutionMineableRateChange(bytes32,uint256)"(
      id?: PromiseOrValue<BytesLike> | null,
      rate?: null
    ): SolutionMineableRateChangeEventFilter;
    SolutionMineableRateChange(
      id?: PromiseOrValue<BytesLike> | null,
      rate?: null
    ): SolutionMineableRateChangeEventFilter;

    "SolutionSubmitted(address,bytes32)"(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): SolutionSubmittedEventFilter;
    SolutionSubmitted(
      addr?: PromiseOrValue<string> | null,
      task?: PromiseOrValue<BytesLike> | null
    ): SolutionSubmittedEventFilter;

    "TaskRetracted(bytes32)"(
      id?: PromiseOrValue<BytesLike> | null
    ): TaskRetractedEventFilter;
    TaskRetracted(
      id?: PromiseOrValue<BytesLike> | null
    ): TaskRetractedEventFilter;

    "TaskSubmitted(bytes32,bytes32,uint256,address)"(
      id?: PromiseOrValue<BytesLike> | null,
      model?: PromiseOrValue<BytesLike> | null,
      fee?: null,
      sender?: PromiseOrValue<string> | null
    ): TaskSubmittedEventFilter;
    TaskSubmitted(
      id?: PromiseOrValue<BytesLike> | null,
      model?: PromiseOrValue<BytesLike> | null,
      fee?: null,
      sender?: PromiseOrValue<string> | null
    ): TaskSubmittedEventFilter;

    "TreasuryRewardPercentageChanged(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): TreasuryRewardPercentageChangedEventFilter;
    TreasuryRewardPercentageChanged(
      amount?: PromiseOrValue<BigNumberish> | null
    ): TreasuryRewardPercentageChangedEventFilter;

    "TreasuryTransferred(address)"(
      to?: PromiseOrValue<string> | null
    ): TreasuryTransferredEventFilter;
    TreasuryTransferred(
      to?: PromiseOrValue<string> | null
    ): TreasuryTransferredEventFilter;

    "ValidatorDeposit(address,address,uint256)"(
      addr?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): ValidatorDepositEventFilter;
    ValidatorDeposit(
      addr?: PromiseOrValue<string> | null,
      validator?: PromiseOrValue<string> | null,
      amount?: null
    ): ValidatorDepositEventFilter;

    "ValidatorMinimumPercentageChanged(uint256)"(
      amount?: PromiseOrValue<BigNumberish> | null
    ): ValidatorMinimumPercentageChangedEventFilter;
    ValidatorMinimumPercentageChanged(
      amount?: PromiseOrValue<BigNumberish> | null
    ): ValidatorMinimumPercentageChangedEventFilter;

    "ValidatorWithdraw(address,address,uint256,uint256)"(
      addr?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ValidatorWithdrawEventFilter;
    ValidatorWithdraw(
      addr?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      amount?: null
    ): ValidatorWithdrawEventFilter;

    "ValidatorWithdrawCancelled(address,uint256)"(
      addr?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null
    ): ValidatorWithdrawCancelledEventFilter;
    ValidatorWithdrawCancelled(
      addr?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null
    ): ValidatorWithdrawCancelledEventFilter;

    "ValidatorWithdrawInitiated(address,uint256,uint256,uint256)"(
      addr?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      unlockTime?: null,
      amount?: null
    ): ValidatorWithdrawInitiatedEventFilter;
    ValidatorWithdrawInitiated(
      addr?: PromiseOrValue<string> | null,
      count?: PromiseOrValue<BigNumberish> | null,
      unlockTime?: null,
      amount?: null
    ): ValidatorWithdrawInitiatedEventFilter;
  };

  estimateGas: {
    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    cancelValidatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimSolution(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    commitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoteFinish(
      taskid_: PromiseOrValue<BytesLike>,
      amnt_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contestationVoteNays(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contestationVoteYeas(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contestationVoted(
      taskid: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contestationVotedIndex(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contestations(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    diffMul(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    generateCommitment(
      sender_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateIPFSCID(
      content_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    getSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    hashModel(
      o_: IArbius.ModelStruct,
      sender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTask(
      o_: IArbius.TaskStruct,
      sender_: PromiseOrValue<string>,
      prevhash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initiateValidatorWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxContestationValidatorStakeSince(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minClaimSolutionTime(overrides?: CallOverrides): Promise<BigNumber>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minRetractionWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    models(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValidatorWithdrawRequests(
      addr: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingValidatorWithdrawRequestsCount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevhash(overrides?: CallOverrides): Promise<BigNumber>;

    registerModel(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retractTask(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    retractionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reward(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMaxContestationValidatorStakeSince(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinClaimSolutionTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinContestationVotePeriodTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinRetractionWaitTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaused(
      paused_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRetractionFeePercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSlashAmountPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSolutionFeePercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setSolutionMineableStatus(
      model_: PromiseOrValue<BytesLike>,
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTreasuryRewardPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setValidatorMinimumPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVersion(
      version_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalCommitment(
      commitment_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    signalSupport(
      model_: PromiseOrValue<BytesLike>,
      support_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    slashAmountPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutions(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitSolution(
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    targetTs(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tasks(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferPauser(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferTreasury(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorCanVote(
      addr_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validatorDeposit(
      validator_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatorMinimumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    validatorWithdrawPendingAmount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voteOnContestation(
      taskid_: PromiseOrValue<BytesLike>,
      yea_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawAccruedFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accruedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelValidatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimSolution(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    commitments(
      commitment: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVoteFinish(
      taskid_: PromiseOrValue<BytesLike>,
      amnt_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contestationVoteNays(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contestationVoteYeas(
      taskid: PromiseOrValue<BytesLike>,
      idx: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contestationVoted(
      taskid: PromiseOrValue<BytesLike>,
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contestationVotedIndex(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contestations(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    diffMul(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitValidatorMinUnlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateCommitment(
      sender_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateIPFSCID(
      content_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSlashAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidatorMinimum(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashModel(
      o_: IArbius.ModelStruct,
      sender_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTask(
      o_: IArbius.TaskStruct,
      sender_: PromiseOrValue<string>,
      prevhash_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initiateValidatorWithdraw(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxContestationValidatorStakeSince(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minClaimSolutionTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minRetractionWaitTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    models(
      model: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValidatorWithdrawRequests(
      addr: PromiseOrValue<string>,
      count: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingValidatorWithdrawRequestsCount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevhash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerModel(
      addr_: PromiseOrValue<string>,
      fee_: PromiseOrValue<BigNumberish>,
      template_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retractTask(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    retractionFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward(
      t: PromiseOrValue<BigNumberish>,
      ts: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMaxContestationValidatorStakeSince(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinClaimSolutionTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinContestationVotePeriodTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinRetractionWaitTime(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaused(
      paused_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRetractionFeePercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSlashAmountPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSolutionFeePercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setSolutionMineableStatus(
      model_: PromiseOrValue<BytesLike>,
      rate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryRewardPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setValidatorMinimumPercentage(
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVersion(
      version_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalCommitment(
      commitment_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    signalSupport(
      model_: PromiseOrValue<BytesLike>,
      support_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    slashAmountPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutionFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutions(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startBlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitContestation(
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitSolution(
      taskid_: PromiseOrValue<BytesLike>,
      cid_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitTask(
      version_: PromiseOrValue<BigNumberish>,
      owner_: PromiseOrValue<string>,
      model_: PromiseOrValue<BytesLike>,
      fee_: PromiseOrValue<BigNumberish>,
      input_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    targetTs(
      t: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tasks(
      taskid: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferPauser(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferTreasury(
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorCanVote(
      addr_: PromiseOrValue<string>,
      taskid_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorDeposit(
      validator_: PromiseOrValue<string>,
      amount_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatorMinimumPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorWithdraw(
      count_: PromiseOrValue<BigNumberish>,
      to_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    validatorWithdrawPendingAmount(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validators(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteOnContestation(
      taskid_: PromiseOrValue<BytesLike>,
      yea_: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAccruedFees(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
