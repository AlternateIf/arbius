/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LookupSolutionCID,
  LookupSolutionCIDInterface,
} from "../LookupSolutionCID";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IArbius",
        name: "_arbius",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "taskid",
        type: "bytes32",
      },
    ],
    name: "lookupSolutionCID",
    outputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103a23803806103a283398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61030f806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634d4d0ba714610030575b600080fd5b61004361003e3660046100d8565b610059565b6040516100509190610115565b60405180910390f35b600080546040516375c7050960e01b815260048101849052606092916001600160a01b0316906375c7050990602401600060405180830381865afa1580156100a5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526100cd9190810190610224565b606001519392505050565b6000602082840312156100ea57600080fd5b5035919050565b60005b8381101561010c5781810151838201526020016100f4565b50506000910152565b60208152600082518060208401526101348160408501602087016100f1565b601f01601f19169190910160400192915050565b634e487b7160e01b600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561018157610181610148565b60405290565b8051801515811461019757600080fd5b919050565b600082601f8301126101ad57600080fd5b815167ffffffffffffffff808211156101c8576101c8610148565b604051601f8301601f19908116603f011681019082821181831017156101f0576101f0610148565b8160405283815286602085880101111561020957600080fd5b61021a8460208301602089016100f1565b9695505050505050565b60006020828403121561023657600080fd5b815167ffffffffffffffff8082111561024e57600080fd5b908301906080828603121561026257600080fd5b61026a61015e565b82516001600160a01b038116811461028157600080fd5b81526020830151828116811461029657600080fd5b60208201526102a760408401610187565b60408201526060830151828111156102be57600080fd5b6102ca8782860161019c565b6060830152509594505050505056fea26469706673582212200e9ee20daacd9d0d250666622678bfc9c6c4cf4d48471ca9394704c0b207388164736f6c63430008130033";

type LookupSolutionCIDConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LookupSolutionCIDConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LookupSolutionCID__factory extends ContractFactory {
  constructor(...args: LookupSolutionCIDConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _arbius: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LookupSolutionCID> {
    return super.deploy(_arbius, overrides || {}) as Promise<LookupSolutionCID>;
  }
  getDeployTransaction(
    _arbius: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_arbius, overrides || {});
  }
  attach(address: string): LookupSolutionCID {
    return super.attach(address) as LookupSolutionCID;
  }
  connect(signer: Signer): LookupSolutionCID__factory {
    return super.connect(signer) as LookupSolutionCID__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LookupSolutionCIDInterface {
    return new utils.Interface(_abi) as LookupSolutionCIDInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LookupSolutionCID {
    return new Contract(address, _abi, signerOrProvider) as LookupSolutionCID;
  }
}
