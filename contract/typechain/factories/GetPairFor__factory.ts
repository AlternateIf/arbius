/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { GetPairFor, GetPairForInterface } from "../GetPairFor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "address",
        name: "factory",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "initCodeHash",
        type: "bytes32",
      },
    ],
    name: "pairFor",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101d7806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637855da6614610030575b600080fd5b61004361003e366004610156565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000806000856001600160a01b0316876001600160a01b031610610084578587610087565b86865b6040516bffffffffffffffffffffffff19606084811b8216602084015283901b166034820152919350915060009086906048016040516020818303038152906040528051906020012086604051602001610116939291906001600160f81b0319815260609390931b6bffffffffffffffffffffffff191660018401526015830191909152603582015260550190565b60408051808303601f19018152919052805160209091012098975050505050505050565b80356001600160a01b038116811461015157600080fd5b919050565b6000806000806080858703121561016c57600080fd5b6101758561013a565b93506101836020860161013a565b92506101916040860161013a565b939692955092936060013592505056fea26469706673582212204bf6b28813870cc1b128a1dee30f091eb4dbe12601328b44b8558b2b36bf159e64736f6c63430008130033";

type GetPairForConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: GetPairForConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class GetPairFor__factory extends ContractFactory {
  constructor(...args: GetPairForConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<GetPairFor> {
    return super.deploy(overrides || {}) as Promise<GetPairFor>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): GetPairFor {
    return super.attach(address) as GetPairFor;
  }
  connect(signer: Signer): GetPairFor__factory {
    return super.connect(signer) as GetPairFor__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): GetPairForInterface {
    return new utils.Interface(_abi) as GetPairForInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): GetPairFor {
    return new Contract(address, _abi, signerOrProvider) as GetPairFor;
  }
}
