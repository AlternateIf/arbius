/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { L1Token, L1TokenInterface } from "../L1Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_customGatewayAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_routerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isArbitrumEnabled",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "l2CustomTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxSubmissionCostForCustomGateway",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSubmissionCostForRouter",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxGasForCustomGateway",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxGasForRouter",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPriceBid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "valueForGateway",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "valueForRouter",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "creditBackAddress",
        type: "address",
      },
    ],
    name: "registerTokenOnL2",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608034620004e257601f620011f238819003918201601f19168301916001600160401b03831184841017620003b457808492606094604052833981010312620004e2576200004d8162000507565b9060406200005e6020830162000507565b910151916200006c620004e7565b600681526541726269757360d01b602082015262000089620004e7565b60048152634149555360e01b602082015260008054336001600160a01b0319821681178355929392916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a38051906001600160401b038211620003b45760045490600182811c92168015620004d7575b6020831014620003935781601f84931162000465575b50602090601f8311600114620003d657600092620003ca575b50508160011b916000199060031b1c1916176004555b80516001600160401b038111620003b457600591825490600182811c92168015620003a9575b6020831014620003935781601f8493116200033d575b50602090601f8311600114620002d257600092620002c6575b50508160011b916000199060031b1c19161790555b600680546001600160a01b039283166001600160a01b03199182161790915560078054939092169216919091179055670de0b6b3a764000081810291808304909114901517156200026b57331562000281576003548181018091116200026b57600355336000526001602052604060002081815401905560405190815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3604051610cd590816200051d8239f35b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b015190503880620001a1565b6000858152602081209350601f198516905b8181106200032457509084600195949392106200030a575b505050811b019055620001b6565b015160001960f88460031b161c19169055388080620002fc565b92936020600181928786015181550195019301620002e4565b909150836000526020600020601f8401851c8101916020851062000388575b90601f8594939201861c01905b81811062000378575062000188565b6000815584935060010162000369565b90915081906200035c565b634e487b7160e01b600052602260045260246000fd5b91607f169162000172565b634e487b7160e01b600052604160045260246000fd5b01519050388062000136565b6004600090815293507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91905b601f198416851062000449576001945083601f198116106200042f575b505050811b016004556200014c565b015160001960f88460031b161c1916905538808062000420565b8181015183556020948501946001909301929091019062000403565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c810160208510620004cf575b90849392915b601f830160051c82018110620004bf5750506200011d565b60008155859450600101620004a7565b5080620004a1565b91607f169162000107565b600080fd5b60408051919082016001600160401b03811183821017620003b457604052565b51906001600160a01b0382168203620004e25756fe608060408181526004908136101561001657600080fd5b600092833560e01c90816306fdde031461082f57508063095ea7b31461080557806318160ddd146107e657806323b872dd1461071a578063313ce567146106fe578063395093511461069757806370a082311461065f578063715018a6146106055780638da5cb5b146105dd5780638e5f5ad11461057c57806395d89b411461047b578063a457c2d7146103d4578063a9059cbb146103a3578063dd62ed3e14610356578063f2fde38b146102935763fc792d8e146100d457600080fd5b610120366003190112610241576100e961096c565b60a43592909161010435916001600160a01b039190828416840361028f57839261011161099d565b6007805460ff60a01b19808216600160a01b17909255600654855163651a36a560e11b81526001600160a01b03998a16868201908152606435602082810191909152604082018d905260243560608301529a90991660808a0152919992989788918391908616908290819060a001039160c435905af1801561028557908794939291610255575b506007546006548651632d67b72d60e01b81529084166001600160a01b03908116958201958652608435602087015260408601939093526044356060860152969091166080840152859283900360a00191839160e43591165af190811561024c575061021f575b50506007549160ff8060a01b9160a01c16151560a01b1691161760075580f35b813d8311610245575b61023281836109f5565b810103126102415738806101ff565b8280fd5b503d610228565b513d87823e3d90fd5b8491943d831161027e575b61026a81836109f5565b8101031261027a57859238610198565b8880fd5b503d610260565b85513d8c823e3d90fd5b8680fd5b509034610241576020366003190112610241576102ae61096c565b906102b761099d565b6001600160a01b0391821692831561030457505082546001600160a01b0319811683178455167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b83823461039f578060031936011261039f578060209261037461096c565b61037c610987565b6001600160a01b0391821683526002865283832091168252845220549051908152f35b5080fd5b83823461039f578060031936011261039f576020906103cd6103c361096c565b6024359033610a2d565b5160018152f35b5091346104785782600319360112610478576103ee61096c565b918360243592338152600260205281812060018060a01b0386168252602052205490828210610427576020856103cd8585038733610b9d565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b5034610241578260031936011261024157805191836005549060019082821c928281168015610572575b602095868610821461055f575084885290811561053d57506001146104e4575b6104e086866104d6828b03836109f5565b5191829182610923565b0390f35b929550600583527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db05b82841061052a57505050826104e0946104d69282010194386104c5565b805486850188015292860192810161050d565b60ff191687860152505050151560051b83010192506104d6826104e0386104c5565b634e487b7160e01b845260229052602483fd5b93607f16936104a5565b5091346104785780600319360112610478575060ff60075460a01c16156105a7576020825160b18152f35b6020606492519162461bcd60e51b835282015260116024820152701393d517d156141150d5115117d0d05313607a1b6044820152fd5b83823461039f578160031936011261039f57905490516001600160a01b039091168152602090f35b833461047857806003193601126104785761061e61099d565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b83823461039f57602036600319011261039f5760209181906001600160a01b0361068761096c565b1681526001845220549051908152f35b5082346104785781600319360112610478576106b161096c565b338252600260209081528383206001600160a01b03831684529052828220546024358101929083106106eb576020846103cd858533610b9d565b634e487b7160e01b815260118552602490fd5b83823461039f578160031936011261039f576020905160128152f35b5091903461039f57606036600319011261039f5761073661096c565b61073e610987565b6001600160a01b0382168452600260209081528585203386529052928490205460443593926001820161077a575b6020866103cd878787610a2d565b8482106107a35750918391610798602096956103cd95033383610b9d565b91939481935061076c565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b83823461039f578160031936011261039f576020906003549051908152f35b83823461039f578060031936011261039f576020906103cd61082561096c565b6024359033610b9d565b9293905034610478578060031936011261047857809380549160019083821c92828516948515610919575b6020958686108114610906578589529081156108e2575060011461088a575b6104e087876104d6828c03836109f5565b81529295507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b8284106108cf57505050826104e0946104d692820101943880610879565b80548685018801529286019281016108b1565b60ff19168887015250505050151560051b83010192506104d6826104e03880610879565b634e487b7160e01b845260228352602484fd5b93607f169361085a565b6020808252825181830181905290939260005b82811061095857505060409293506000838284010152601f8019910116010190565b818101860151848201604001528501610936565b600435906001600160a01b038216820361098257565b600080fd5b602435906001600160a01b038216820361098257565b6000546001600160a01b031633036109b157565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b90601f8019910116810190811067ffffffffffffffff821117610a1757604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03908116918215610b4a5716918215610af95760008281526001602052604081205491808310610aa557604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95876020965260018652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610c4e5716918215610bfe5760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260028252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fdfea2646970667358221220eb4037bb4e06c2758ecf64c0b69bca387d3c533a344f48ebb6506ee26be8a98b64736f6c63430008130033";

type L1TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L1TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L1Token__factory extends ContractFactory {
  constructor(...args: L1TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _customGatewayAddress: string,
    _routerAddress: string,
    _initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<L1Token> {
    return super.deploy(
      _customGatewayAddress,
      _routerAddress,
      _initialSupply,
      overrides || {}
    ) as Promise<L1Token>;
  }
  getDeployTransaction(
    _customGatewayAddress: string,
    _routerAddress: string,
    _initialSupply: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _customGatewayAddress,
      _routerAddress,
      _initialSupply,
      overrides || {}
    );
  }
  attach(address: string): L1Token {
    return super.attach(address) as L1Token;
  }
  connect(signer: Signer): L1Token__factory {
    return super.connect(signer) as L1Token__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L1TokenInterface {
    return new utils.Interface(_abi) as L1TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L1Token {
    return new Contract(address, _abi, signerOrProvider) as L1Token;
  }
}
