/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OneToOneConvert,
  OneToOneConvertInterface,
} from "../OneToOneConvert";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenA",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenB",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102f63803806102f683398101604081905261002f9161007c565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100af565b80516001600160a01b038116811461007757600080fd5b919050565b6000806040838503121561008f57600080fd5b61009883610060565b91506100a660208401610060565b90509250929050565b610238806100be6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80630fc63d10146100465780635f64b55b1461007557806394b918de14610088575b600080fd5b600054610059906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b600154610059906001600160a01b031681565b61009b6100963660046101c0565b61009d565b005b6000546040516323b872dd60e01b815233600482015260016024820152604481018390526001600160a01b03909116906323b872dd906064016020604051808303816000875af11580156100f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061011991906101d9565b5060015460405163a9059cbb60e01b8152336004820152602481018390526001600160a01b039091169063a9059cbb906044016020604051808303816000875af115801561016b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061018f91906101d9565b50604051819033907f562c219552544ec4c9d7a8eb850f80ea152973e315372bf4999fe7c953ea004f90600090a350565b6000602082840312156101d257600080fd5b5035919050565b6000602082840312156101eb57600080fd5b815180151581146101fb57600080fd5b939250505056fea2646970667358221220c1f7ce5d62b075fa48ef4d0b1cf062dec6234c6ce5740184def048516b214d9864736f6c63430008130033";

type OneToOneConvertConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OneToOneConvertConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OneToOneConvert__factory extends ContractFactory {
  constructor(...args: OneToOneConvertConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OneToOneConvert> {
    return super.deploy(
      _tokenA,
      _tokenB,
      overrides || {}
    ) as Promise<OneToOneConvert>;
  }
  getDeployTransaction(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_tokenA, _tokenB, overrides || {});
  }
  attach(address: string): OneToOneConvert {
    return super.attach(address) as OneToOneConvert;
  }
  connect(signer: Signer): OneToOneConvert__factory {
    return super.connect(signer) as OneToOneConvert__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OneToOneConvertInterface {
    return new utils.Interface(_abi) as OneToOneConvertInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OneToOneConvert {
    return new Contract(address, _abi, signerOrProvider) as OneToOneConvert;
  }
}
