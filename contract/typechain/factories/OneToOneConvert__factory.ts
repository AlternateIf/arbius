/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  OneToOneConvert,
  OneToOneConvertInterface,
} from "../OneToOneConvert";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "_tokenB",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenA",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenB",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60803461008d57601f6102f638819003918201601f19168301916001600160401b0383118484101761009257808492604094855283398101031261008d57610052602061004b836100a8565b92016100a8565b600080546001600160a01b039384166001600160a01b0319918216179091556001805492909316911617905560405161023990816100bd8239f35b600080fd5b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b038216820361008d5756fe60806040818152600436101561001457600080fd5b600091823560e01c9081630fc63d101461018a575080635f64b55b14610162576394b918de1461004357600080fd5b3461015e5760208060031936011261015a57826004359260018060a01b0382848282541660648551809481936323b872dd60e01b8352336004840152600160248401528b60448401525af1801561014d5790859291610130575b5060015416604483518095819363a9059cbb60e01b83523360048401528960248401525af190811561012757506100f9575b5050337f562c219552544ec4c9d7a8eb850f80ea152973e315372bf4999fe7c953ea004f8380a380f35b8161011892903d10610120575b61011081836101ae565b8101906101e6565b5038806100cf565b503d610106565b513d86823e3d90fd5b61014690833d85116101205761011081836101ae565b503861009d565b50505051903d90823e3d90fd5b8280fd5b5080fd5b503461015e578160031936011261015e5760015490516001600160a01b039091168152602090f35b83903461015e578160031936011261015e5790546001600160a01b03168152602090f35b90601f8019910116810190811067ffffffffffffffff8211176101d057604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126101fe575180151581036101fe5790565b600080fdfea264697066735822122036f08f025863920736136a82d5a9d0596404104ce25463a5d854c6d7722b5a8b64736f6c63430008130033";

type OneToOneConvertConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: OneToOneConvertConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class OneToOneConvert__factory extends ContractFactory {
  constructor(...args: OneToOneConvertConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OneToOneConvert> {
    return super.deploy(
      _tokenA,
      _tokenB,
      overrides || {}
    ) as Promise<OneToOneConvert>;
  }
  getDeployTransaction(
    _tokenA: string,
    _tokenB: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_tokenA, _tokenB, overrides || {});
  }
  attach(address: string): OneToOneConvert {
    return super.attach(address) as OneToOneConvert;
  }
  connect(signer: Signer): OneToOneConvert__factory {
    return super.connect(signer) as OneToOneConvert__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OneToOneConvertInterface {
    return new utils.Interface(_abi) as OneToOneConvertInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OneToOneConvert {
    return new Contract(address, _abi, signerOrProvider) as OneToOneConvert;
  }
}
