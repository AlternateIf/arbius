/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ClaimSolution, ClaimSolutionInterface } from "../ClaimSolution";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IArbius",
        name: "_arbius",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_taskid",
        type: "bytes32",
      },
    ],
    name: "claimSolution",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161017d38038061017d83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b60eb806100926000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806377286d1714602d575b600080fd5b603c6038366004609d565b603e565b005b6000546040516377286d1760e01b8152600481018390526001600160a01b03909116906377286d1790602401600060405180830381600087803b158015608357600080fd5b505af11580156096573d6000803e3d6000fd5b5050505050565b60006020828403121560ae57600080fd5b503591905056fea26469706673582212205db600296f2c5ba8b393b217b45b0501c5f27e1db5c0c15a5c9772dc16334c1664736f6c63430008130033";

type ClaimSolutionConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimSolutionConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClaimSolution__factory extends ContractFactory {
  constructor(...args: ClaimSolutionConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _arbius: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ClaimSolution> {
    return super.deploy(_arbius, overrides || {}) as Promise<ClaimSolution>;
  }
  getDeployTransaction(
    _arbius: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_arbius, overrides || {});
  }
  attach(address: string): ClaimSolution {
    return super.attach(address) as ClaimSolution;
  }
  connect(signer: Signer): ClaimSolution__factory {
    return super.connect(signer) as ClaimSolution__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimSolutionInterface {
    return new utils.Interface(_abi) as ClaimSolutionInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimSolution {
    return new Contract(address, _abi, signerOrProvider) as ClaimSolution;
  }
}
