/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  LookupContestationValidator,
  LookupContestationValidatorInterface,
} from "../LookupContestationValidator";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IArbius",
        name: "_arbius",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "taskid",
        type: "bytes32",
      },
    ],
    name: "lookupContestationValidator",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161026738038061026783398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101d4806100936000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063337d62a214610030575b600080fd5b61004361003e3660046100d5565b61005f565b6040516001600160a01b03909116815260200160405180910390f35b6000805460405163d33b2ef560e01b81526004810184905282916001600160a01b03169063d33b2ef590602401606060405180830381865afa1580156100a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100cd9190610107565b519392505050565b6000602082840312156100e757600080fd5b5035919050565b805163ffffffff8116811461010257600080fd5b919050565b60006060828403121561011957600080fd5b6040516060810167ffffffffffffffff828210818311171561014b57634e487b7160e01b600052604160045260246000fd5b6040919091528351906001600160a01b038216821461016957600080fd5b908252602084015190808216821461018057600080fd5b506020820152610192604084016100ee565b6040820152939250505056fea2646970667358221220ad02948fa62182b56504083e012b9692066a3ca02bdba31743db047814573e7e64736f6c63430008130033";

type LookupContestationValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LookupContestationValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class LookupContestationValidator__factory extends ContractFactory {
  constructor(...args: LookupContestationValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    _arbius: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<LookupContestationValidator> {
    return super.deploy(
      _arbius,
      overrides || {}
    ) as Promise<LookupContestationValidator>;
  }
  getDeployTransaction(
    _arbius: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_arbius, overrides || {});
  }
  attach(address: string): LookupContestationValidator {
    return super.attach(address) as LookupContestationValidator;
  }
  connect(signer: Signer): LookupContestationValidator__factory {
    return super.connect(signer) as LookupContestationValidator__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LookupContestationValidatorInterface {
    return new utils.Interface(_abi) as LookupContestationValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): LookupContestationValidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as LookupContestationValidator;
  }
}
