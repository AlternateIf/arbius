/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BulkSubmitTask,
  BulkSubmitTaskInterface,
} from "../../../contracts/Example/BulkSubmitTask";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "engine_",
        type: "address",
      },
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "engine",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "version_",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "model_",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "fee_",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "input_",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "count_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gas_",
        type: "uint256",
      },
    ],
    name: "submitTaskBulk",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "version_",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "owner_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "model_",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "fee_",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "input_",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "count_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gas_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "feeAmount_",
        type: "uint256",
      },
    ],
    name: "submitTaskBulkWithFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608080604052346100f157604081610568803803809161001f82856100f6565b8339810103126100f15761003e60206100378361012f565b920161012f565b602060018060a01b03809316604460018060a01b031991600095869582858854161787551680936001541617600155604051948593849263095ea7b360e01b8452600484015260001960248401525af180156100e6576100a8575b60405161042490816101448239f35b6020813d82116100de575b816100c0602093836100f6565b810103126100da5751801515036100d75780610099565b80fd5b5080fd5b3d91506100b3565b6040513d84823e3d90fd5b600080fd5b601f909101601f19168101906001600160401b0382119082101761011957604052565b634e487b7160e01b600052604160045260246000fd5b51906001600160a01b03821682036100f15756fe60806040818152600436101561001457600080fd5b600091823560e01c9081637938c4691461016457508063a91d65c5146100a0578063c9d4623f146100795763fc0c546a1461004e57600080fd5b3461007557816003193601126100755760015490516001600160a01b039091168152602090f35b5080fd5b5034610075578160031936011261007557905490516001600160a01b039091168152602090f35b50346100755760e0366003190112610075576100ba6102ac565b906100c36102c1565b916084359267ffffffffffffffff8411610160576100e86101289436906004016102d7565b94909161011a60a4359660c435965194859360208501976308745dd160e01b8952606435916044359160248801610305565b03601f198101835282610351565b845b848110610135578580f35b61015b90868060018060a01b0381541686828751928af1506101556103ae565b50610389565b61012a565b8480fd5b919050346102a8576101003660031901126102a8576101816102ac565b6101896102c1565b9260843567ffffffffffffffff81116102a4576101aa9036906004016102d7565b60a4929192359560c4359560018060a01b03936020816064818d89600154166323b872dd60e01b835233600484015230602484015260e43560448401525af1801561029a5761025b575b5061022f92610221915195869360208501986308745dd160e01b8a52606435916044359160248801610305565b03601f198101845283610351565b855b85811061023c578680f35b6102569087808481541687828851928bf1506101556103ae565b610231565b6020813d8211610292575b8161027360209383610351565b8101031261028e57518015150361028a57386101f4565b8880fd5b8980fd5b3d9150610266565b82513d8c823e3d90fd5b8580fd5b8280fd5b6004359060ff821682036102bc57565b600080fd5b602435906001600160a01b03821682036102bc57565b9181601f840112156102bc5782359167ffffffffffffffff83116102bc57602083818601950101116102bc57565b9491928694919360ff60c0989516875260018060a01b031660208701526040860152606085015260a060808501528160a0850152848401376000828201840152601f01601f1916010190565b90601f8019910116810190811067ffffffffffffffff82111761037357604052565b634e487b7160e01b600052604160045260246000fd5b60001981146103985760010190565b634e487b7160e01b600052601160045260246000fd5b3d156103e9573d9067ffffffffffffffff821161037357604051916103dd601f8201601f191660200184610351565b82523d6000602084013e565b60609056fea26469706673582212206be9f5fd2243bf968cca76e00c2f8ed6a85e83e7cd80e3ce9a9ac129656f7cde64736f6c63430008130033";

type BulkSubmitTaskConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BulkSubmitTaskConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BulkSubmitTask__factory extends ContractFactory {
  constructor(...args: BulkSubmitTaskConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    engine_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BulkSubmitTask> {
    return super.deploy(
      engine_,
      token_,
      overrides || {}
    ) as Promise<BulkSubmitTask>;
  }
  override getDeployTransaction(
    engine_: PromiseOrValue<string>,
    token_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(engine_, token_, overrides || {});
  }
  override attach(address: string): BulkSubmitTask {
    return super.attach(address) as BulkSubmitTask;
  }
  override connect(signer: Signer): BulkSubmitTask__factory {
    return super.connect(signer) as BulkSubmitTask__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BulkSubmitTaskInterface {
    return new utils.Interface(_abi) as BulkSubmitTaskInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BulkSubmitTask {
    return new Contract(address, _abi, signerOrProvider) as BulkSubmitTask;
  }
}
