/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  L1Token,
  L1TokenInterface,
} from "../../../contracts/L1Token.sol/L1Token";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_customGatewayAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "_routerAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isArbitrumEnabled",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "l2CustomTokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "maxSubmissionCostForCustomGateway",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxSubmissionCostForRouter",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxGasForCustomGateway",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "maxGasForRouter",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "gasPriceBid",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "valueForGateway",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "valueForRouter",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "creditBackAddress",
        type: "address",
      },
    ],
    name: "registerTokenOnL2",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608034620004e257601f6200119e38819003918201601f19168301916001600160401b03831184841017620003b457808492606094604052833981010312620004e2576200004d8162000507565b9060406200005e6020830162000507565b910151916200006c620004e7565b600681526541726269757360d01b602082015262000089620004e7565b60048152634149555360e01b602082015260008054336001600160a01b0319821681178355929392916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a38051906001600160401b038211620003b45760045490600182811c92168015620004d7575b6020831014620003935781601f84931162000465575b50602090601f8311600114620003d657600092620003ca575b50508160011b916000199060031b1c1916176004555b80516001600160401b038111620003b457600591825490600182811c92168015620003a9575b6020831014620003935781601f8493116200033d575b50602090601f8311600114620002d257600092620002c6575b50508160011b916000199060031b1c19161790555b600680546001600160a01b039283166001600160a01b03199182161790915560078054939092169216919091179055670de0b6b3a764000081810291808304909114901517156200026b57331562000281576003548181018091116200026b57600355336000526001602052604060002081815401905560405190815260007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a3604051610c8190816200051d8239f35b634e487b7160e01b600052601160045260246000fd5b60405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f2061646472657373006044820152606490fd5b015190503880620001a1565b6000858152602081209350601f198516905b8181106200032457509084600195949392106200030a575b505050811b019055620001b6565b015160001960f88460031b161c19169055388080620002fc565b92936020600181928786015181550195019301620002e4565b909150836000526020600020601f8401851c8101916020851062000388575b90601f8594939201861c01905b81811062000378575062000188565b6000815584935060010162000369565b90915081906200035c565b634e487b7160e01b600052602260045260246000fd5b91607f169162000172565b634e487b7160e01b600052604160045260246000fd5b01519050388062000136565b6004600090815293507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91905b601f198416851062000449576001945083601f198116106200042f575b505050811b016004556200014c565b015160001960f88460031b161c1916905538808062000420565b8181015183556020948501946001909301929091019062000403565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c810160208510620004cf575b90849392915b601f830160051c82018110620004bf5750506200011d565b60008155859450600101620004a7565b5080620004a1565b91607f169162000107565b600080fd5b60408051919082016001600160401b03811183821017620003b457604052565b51906001600160a01b0382168203620004e25756fe608060408181526004908136101561001657600080fd5b600092833560e01c90816306fdde03146107a457508063095ea7b31461077a57806318160ddd1461075b57806323b872dd1461068f578063313ce56714610673578063395093511461060c57806370a08231146105d4578063715018a61461058c5780638da5cb5b146105645780638e5f5ad11461050357806395d89b4114610420578063a457c2d714610379578063a9059cbb14610348578063dd62ed3e146102fb578063f2fde38b1461024a5763fc792d8e146100d457600080fd5b6101203660031901126101f8576100e96108c4565b60a43592909161010435916001600160a01b03919082841684036102465783926101116108f5565b6007549660ff60a01b1996600160a01b888a16176007558260065416908551809263651a36a560e11b8252818061015760209c8d96898c60243592606435918701610bf8565b039160c435905af1801561023c5790879493929161020c575b5081600754169160065416926101a1865197889586948594632d67b72d60e01b865260443592608435918701610bf8565b039160e435905af190811561020357506101d6575b50506007549160ff8060a01b9160a01c16151560a01b1691161760075580f35b813d83116101fc575b6101e9818361094d565b810103126101f85738806101b6565b8280fd5b503d6101df565b513d87823e3d90fd5b8491943d8311610235575b610221818361094d565b8101031261023157859238610170565b8880fd5b503d610217565b85513d8c823e3d90fd5b8680fd5b5090346101f85760203660031901126101f8576102656108c4565b9061026e6108f5565b6001600160a01b039182169283156102a957505082546001600160a01b031981168317845516600080516020610c2c8339815191528380a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b838234610344578060031936011261034457806020926103196108c4565b6103216108df565b6001600160a01b0391821683526002865283832091168252845220549051908152f35b5080fd5b8382346103445780600319360112610344576020906103726103686108c4565b6024359033610986565b5160018152f35b50913461041d578260031936011261041d576103936108c4565b918360243592338152600260205281812060018060a01b03861682526020522054908282106103cc576020856103728585038733610af6565b608490602086519162461bcd60e51b8352820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b6064820152fd5b80fd5b50346101f857826003193601126101f857805191836005549060019082821c9282811680156104f9575b60209586861082146104e657508488529081156104c45750600114610489575b610485868661047b828b038361094d565b519182918261087b565b0390f35b929550600583528583205b8284106104b157505050826104859461047b92820101943861046a565b8054868501880152928601928101610494565b60ff191687860152505050151560051b830101925061047b826104853861046a565b634e487b7160e01b845260229052602483fd5b93607f169361044a565b50913461041d578060031936011261041d575060ff60075460a01c161561052e576020825160b18152f35b6020606492519162461bcd60e51b835282015260116024820152701393d517d156141150d5115117d0d05313607a1b6044820152fd5b838234610344578160031936011261034457905490516001600160a01b039091168152602090f35b833461041d578060031936011261041d576105a56108f5565b80546001600160a01b03198116825581906001600160a01b0316600080516020610c2c8339815191528280a380f35b8382346103445760203660031901126103445760209181906001600160a01b036105fc6108c4565b1681526001845220549051908152f35b50823461041d578160031936011261041d576106266108c4565b338252600260209081528383206001600160a01b038316845290528282205460243581019290831061066057602084610372858533610af6565b634e487b7160e01b815260118552602490fd5b8382346103445781600319360112610344576020905160128152f35b50919034610344576060366003190112610344576106ab6108c4565b6106b36108df565b6001600160a01b038216845260026020908152858520338652905292849020546044359392600182016106ef575b602086610372878787610986565b848210610718575091839161070d6020969561037295033383610af6565b9193948193506106e1565b606490602087519162461bcd60e51b8352820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152fd5b8382346103445781600319360112610344576020906003549051908152f35b83823461034457806003193601126103445760209061037261079a6108c4565b6024359033610af6565b929390503461041d578060031936011261041d57809380549160019083821c92828516948515610871575b602095868610811461085e5785895290811561083a57506001146107ff575b610485878761047b828c038361094d565b9080949750528583205b82841061082757505050826104859461047b928201019438806107ee565b8054868501880152928601928101610809565b60ff19168887015250505050151560051b830101925061047b8261048538806107ee565b634e487b7160e01b845260228352602484fd5b93607f16936107cf565b6020808252825181830181905290939260005b8281106108b057505060409293506000838284010152601f8019910116010190565b81810186015184820160400152850161088e565b600435906001600160a01b03821682036108da57565b600080fd5b602435906001600160a01b03821682036108da57565b6000546001600160a01b0316330361090957565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b601f909101601f19168101906001600160401b0382119082101761097057604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03908116918215610aa35716918215610a5257600082815260016020526040812054918083106109fe57604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef95876020965260018652038282205586815220818154019055604051908152a3565b60405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b6064820152608490fd5b60405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608490fd5b60405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b6064820152608490fd5b6001600160a01b03908116918215610ba75716918215610b575760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260028252604060002085600052825280604060002055604051908152a3565b60405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608490fd5b60405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608490fd5b6001600160a01b039182168152602081019290925260408201929092526060810192909252909116608082015260a0019056fe8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0a2646970667358221220f2588684ff1d22d5d67894b3a6b3c6bf5f10bb9298bc55bacc27ff787cc0e0c664736f6c63430008130033";

type L1TokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: L1TokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class L1Token__factory extends ContractFactory {
  constructor(...args: L1TokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _customGatewayAddress: PromiseOrValue<string>,
    _routerAddress: PromiseOrValue<string>,
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<L1Token> {
    return super.deploy(
      _customGatewayAddress,
      _routerAddress,
      _initialSupply,
      overrides || {}
    ) as Promise<L1Token>;
  }
  override getDeployTransaction(
    _customGatewayAddress: PromiseOrValue<string>,
    _routerAddress: PromiseOrValue<string>,
    _initialSupply: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _customGatewayAddress,
      _routerAddress,
      _initialSupply,
      overrides || {}
    );
  }
  override attach(address: string): L1Token {
    return super.attach(address) as L1Token;
  }
  override connect(signer: Signer): L1Token__factory {
    return super.connect(signer) as L1Token__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): L1TokenInterface {
    return new utils.Interface(_abi) as L1TokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): L1Token {
    return new Contract(address, _abi, signerOrProvider) as L1Token;
  }
}
