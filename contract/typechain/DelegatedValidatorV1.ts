/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DelegatedValidatorV1Interface extends utils.Interface {
  functions: {
    "arbius()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "calculateRewardsEarned(address)": FunctionFragment;
    "cancelWithdraw()": FunctionFragment;
    "claim()": FunctionFragment;
    "delegateVoting(address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "depositOf(address)": FunctionFragment;
    "depositsEnabled()": FunctionFragment;
    "initiateWithdraw()": FunctionFragment;
    "miner()": FunctionFragment;
    "modelIdEnabled(bytes32)": FunctionFragment;
    "modelIds(uint256)": FunctionFragment;
    "modelIdsLength()": FunctionFragment;
    "pendingWithdraws(address,uint256)": FunctionFragment;
    "setDepositsEnabled(bool)": FunctionFragment;
    "submitContestation(bytes32)": FunctionFragment;
    "submitSolution(bytes32,bytes)": FunctionFragment;
    "totalDeposited()": FunctionFragment;
    "userPendingWithdrawCount(address)": FunctionFragment;
    "voteOnContestation(bytes32,bool)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "arbius", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateRewardsEarned",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claim", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "delegateVoting",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "depositOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "depositsEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initiateWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "miner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "modelIdEnabled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "modelIds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "modelIdsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingWithdraws",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDepositsEnabled",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "submitContestation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSolution",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userPendingWithdrawCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "voteOnContestation",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "arbius", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRewardsEarned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateVoting",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "miner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modelIdEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "modelIds", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modelIdsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingWithdraws",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDepositsEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitContestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPendingWithdrawCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteOnContestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Claim(address,uint256)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
    "WithdrawCancelled(address,uint256)": EventFragment;
    "WithdrawInitiated(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claim"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawInitiated"): EventFragment;
}

export type ClaimEvent = TypedEvent<
  [string, BigNumber],
  { addr: string; amount: BigNumber }
>;

export type ClaimEventFilter = TypedEventFilter<ClaimEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber],
  { addr: string; amount: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  { addr: string; count: BigNumber }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export type WithdrawCancelledEvent = TypedEvent<
  [string, BigNumber],
  { addr: string; count: BigNumber }
>;

export type WithdrawCancelledEventFilter =
  TypedEventFilter<WithdrawCancelledEvent>;

export type WithdrawInitiatedEvent = TypedEvent<
  [string, BigNumber],
  { addr: string; count: BigNumber }
>;

export type WithdrawInitiatedEventFilter =
  TypedEventFilter<WithdrawInitiatedEvent>;

export interface DelegatedValidatorV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DelegatedValidatorV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arbius(overrides?: CallOverrides): Promise<[string]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    calculateRewardsEarned(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateVoting(
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    depositsEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    initiateWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    miner(overrides?: CallOverrides): Promise<[string]>;

    modelIdEnabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    modelIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    modelIdsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingWithdraws(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    setDepositsEnabled(
      _yea: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitContestation(
      _taskid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitSolution(
      _taskid: BytesLike,
      _cid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalDeposited(overrides?: CallOverrides): Promise<[BigNumber]>;

    userPendingWithdrawCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    voteOnContestation(
      _taskid: BytesLike,
      _yea: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  arbius(overrides?: CallOverrides): Promise<string>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  calculateRewardsEarned(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claim(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateVoting(
    _delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositsEnabled(overrides?: CallOverrides): Promise<boolean>;

  initiateWithdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  miner(overrides?: CallOverrides): Promise<string>;

  modelIdEnabled(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  modelIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  modelIdsLength(overrides?: CallOverrides): Promise<BigNumber>;

  pendingWithdraws(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  setDepositsEnabled(
    _yea: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitContestation(
    _taskid: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitSolution(
    _taskid: BytesLike,
    _cid: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

  userPendingWithdrawCount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  voteOnContestation(
    _taskid: BytesLike,
    _yea: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    arbius(overrides?: CallOverrides): Promise<string>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    calculateRewardsEarned(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelWithdraw(overrides?: CallOverrides): Promise<void>;

    claim(overrides?: CallOverrides): Promise<void>;

    delegateVoting(
      _delegatee: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(_amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    depositOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositsEnabled(overrides?: CallOverrides): Promise<boolean>;

    initiateWithdraw(overrides?: CallOverrides): Promise<void>;

    miner(overrides?: CallOverrides): Promise<string>;

    modelIdEnabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    modelIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    modelIdsLength(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdraws(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setDepositsEnabled(_yea: boolean, overrides?: CallOverrides): Promise<void>;

    submitContestation(
      _taskid: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitSolution(
      _taskid: BytesLike,
      _cid: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    userPendingWithdrawCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteOnContestation(
      _taskid: BytesLike,
      _yea: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Claim(address,uint256)"(
      addr?: string | null,
      amount?: null
    ): ClaimEventFilter;
    Claim(addr?: string | null, amount?: null): ClaimEventFilter;

    "Deposit(address,uint256)"(
      addr?: string | null,
      amount?: null
    ): DepositEventFilter;
    Deposit(addr?: string | null, amount?: null): DepositEventFilter;

    "Withdraw(address,uint256)"(
      addr?: string | null,
      count?: null
    ): WithdrawEventFilter;
    Withdraw(addr?: string | null, count?: null): WithdrawEventFilter;

    "WithdrawCancelled(address,uint256)"(
      addr?: string | null,
      count?: null
    ): WithdrawCancelledEventFilter;
    WithdrawCancelled(
      addr?: string | null,
      count?: null
    ): WithdrawCancelledEventFilter;

    "WithdrawInitiated(address,uint256)"(
      addr?: string | null,
      count?: null
    ): WithdrawInitiatedEventFilter;
    WithdrawInitiated(
      addr?: string | null,
      count?: null
    ): WithdrawInitiatedEventFilter;
  };

  estimateGas: {
    arbius(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    calculateRewardsEarned(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateVoting(
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    depositsEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    initiateWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    miner(overrides?: CallOverrides): Promise<BigNumber>;

    modelIdEnabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modelIds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    modelIdsLength(overrides?: CallOverrides): Promise<BigNumber>;

    pendingWithdraws(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setDepositsEnabled(
      _yea: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitContestation(
      _taskid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitSolution(
      _taskid: BytesLike,
      _cid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalDeposited(overrides?: CallOverrides): Promise<BigNumber>;

    userPendingWithdrawCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    voteOnContestation(
      _taskid: BytesLike,
      _yea: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    arbius(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateRewardsEarned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claim(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateVoting(
      _delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositsEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initiateWithdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    miner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    modelIdEnabled(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modelIds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modelIdsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingWithdraws(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDepositsEnabled(
      _yea: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitContestation(
      _taskid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitSolution(
      _taskid: BytesLike,
      _cid: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalDeposited(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userPendingWithdrawCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteOnContestation(
      _taskid: BytesLike,
      _yea: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
