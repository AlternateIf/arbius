/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DelegatedValidatorDeployerV1Interface extends utils.Interface {
  functions: {
    "arbius()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "deploy(bytes32[])": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "representatives(uint256)": FunctionFragment;
    "representativesLength()": FunctionFragment;
    "representativesOwners(address)": FunctionFragment;
    "version(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "arbius", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "deploy", values: [BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "representatives",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "representativesLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "representativesOwners",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "version", values: [string]): string;

  decodeFunctionResult(functionFragment: "arbius", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "representatives",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "representativesLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "representativesOwners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;

  events: {
    "Deploy(address,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deploy"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export type DeployEvent = TypedEvent<
  [string, string],
  { addr: string; del: string }
>;

export type DeployEventFilter = TypedEventFilter<DeployEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface DelegatedValidatorDeployerV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DelegatedValidatorDeployerV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    arbius(overrides?: CallOverrides): Promise<[string]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    deploy(
      _modelIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      _arbius: string,
      _baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    representatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    representativesLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    representativesOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    version(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  arbius(overrides?: CallOverrides): Promise<string>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  deploy(
    _modelIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    _arbius: string,
    _baseToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  representatives(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  representativesLength(overrides?: CallOverrides): Promise<BigNumber>;

  representativesOwners(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<string>;

  version(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    arbius(overrides?: CallOverrides): Promise<string>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    deploy(_modelIds: BytesLike[], overrides?: CallOverrides): Promise<string>;

    initialize(
      _arbius: string,
      _baseToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    representatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    representativesLength(overrides?: CallOverrides): Promise<BigNumber>;

    representativesOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    version(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Deploy(address,address)"(
      addr?: string | null,
      del?: string | null
    ): DeployEventFilter;
    Deploy(addr?: string | null, del?: string | null): DeployEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    arbius(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    deploy(
      _modelIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      _arbius: string,
      _baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    representatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    representativesLength(overrides?: CallOverrides): Promise<BigNumber>;

    representativesOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    arbius(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploy(
      _modelIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      _arbius: string,
      _baseToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    representatives(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    representativesLength(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    representativesOwners(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
