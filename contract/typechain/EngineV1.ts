/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type ModelStruct = {
  fee: BigNumberish;
  addr: string;
  rate: BigNumberish;
  cid: BytesLike;
};

export type ModelStructOutput = [BigNumber, string, BigNumber, string] & {
  fee: BigNumber;
  addr: string;
  rate: BigNumber;
  cid: string;
};

export type TaskStruct = {
  model: BytesLike;
  fee: BigNumberish;
  owner: string;
  blocktime: BigNumberish;
  version: BigNumberish;
  cid: BytesLike;
};

export type TaskStructOutput = [
  string,
  BigNumber,
  string,
  BigNumber,
  number,
  string
] & {
  model: string;
  fee: BigNumber;
  owner: string;
  blocktime: BigNumber;
  version: number;
  cid: string;
};

export interface EngineV1Interface extends utils.Interface {
  functions: {
    "accruedFees()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "cancelValidatorWithdraw(uint256)": FunctionFragment;
    "claimSolution(bytes32)": FunctionFragment;
    "commitments(bytes32)": FunctionFragment;
    "contestationVoteFinish(bytes32,uint32)": FunctionFragment;
    "contestationVoteNays(bytes32,uint256)": FunctionFragment;
    "contestationVoteYeas(bytes32,uint256)": FunctionFragment;
    "contestationVoted(bytes32,address)": FunctionFragment;
    "contestationVotedIndex(bytes32)": FunctionFragment;
    "contestations(bytes32)": FunctionFragment;
    "diffMul(uint256,uint256)": FunctionFragment;
    "exitValidatorMinUnlockTime()": FunctionFragment;
    "generateCommitment(address,bytes32,bytes)": FunctionFragment;
    "generateIPFSCID(bytes)": FunctionFragment;
    "getPsuedoTotalSupply()": FunctionFragment;
    "getReward()": FunctionFragment;
    "getSlashAmount()": FunctionFragment;
    "getValidatorMinimum()": FunctionFragment;
    "hashModel((uint256,address,uint256,bytes),address)": FunctionFragment;
    "hashTask((bytes32,uint256,address,uint64,uint8,bytes),address,bytes32)": FunctionFragment;
    "initialize(address,address)": FunctionFragment;
    "initiateValidatorWithdraw(uint256)": FunctionFragment;
    "minClaimSolutionTime()": FunctionFragment;
    "minContestationVotePeriodTime()": FunctionFragment;
    "minRetractionWaitTime()": FunctionFragment;
    "models(bytes32)": FunctionFragment;
    "owner()": FunctionFragment;
    "pendingValidatorWithdrawRequests(address,uint256)": FunctionFragment;
    "pendingValidatorWithdrawRequestsCount(address)": FunctionFragment;
    "prevhash()": FunctionFragment;
    "registerModel(address,uint256,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retractTask(bytes32)": FunctionFragment;
    "retractionFeePercentage()": FunctionFragment;
    "reward(uint256,uint256)": FunctionFragment;
    "setExitValidatorMinUnlockTime(uint256)": FunctionFragment;
    "setMinClaimSolutionTime(uint256)": FunctionFragment;
    "setMinContestationVotePeriodTime(uint256)": FunctionFragment;
    "setMinRetractionWaitTime(uint256)": FunctionFragment;
    "setRetractionFeePercentage(uint256)": FunctionFragment;
    "setSlashAmountPercentage(uint256)": FunctionFragment;
    "setSolutionFeePercentage(uint256)": FunctionFragment;
    "setSolutionMineableRate(bytes32,uint256)": FunctionFragment;
    "setTreasuryRewardPercentage(uint256)": FunctionFragment;
    "setValidatorMinimumPercentage(uint256)": FunctionFragment;
    "setVersion(uint256)": FunctionFragment;
    "signalCommitment(bytes32)": FunctionFragment;
    "signalSupport(bytes32,bool)": FunctionFragment;
    "slashAmountPercentage()": FunctionFragment;
    "solutionFeePercentage()": FunctionFragment;
    "solutions(bytes32)": FunctionFragment;
    "startBlockTime()": FunctionFragment;
    "submitContestation(bytes32)": FunctionFragment;
    "submitSolution(bytes32,bytes)": FunctionFragment;
    "submitTask(uint8,address,bytes32,uint256,bytes)": FunctionFragment;
    "targetTs(uint256)": FunctionFragment;
    "tasks(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferTreasury(address)": FunctionFragment;
    "treasury()": FunctionFragment;
    "treasuryRewardPercentage()": FunctionFragment;
    "validatorDeposit(address,uint256)": FunctionFragment;
    "validatorMinimumPercentage()": FunctionFragment;
    "validatorWithdraw(uint256,address)": FunctionFragment;
    "validatorWithdrawPendingAmount(address)": FunctionFragment;
    "validators(address)": FunctionFragment;
    "version()": FunctionFragment;
    "voteOnContestation(bytes32,bool)": FunctionFragment;
    "withdrawAccruedFees()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "accruedFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "cancelValidatorWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claimSolution",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "commitments",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteFinish",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteNays",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoteYeas",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVoted",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "contestationVotedIndex",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contestations",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "diffMul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitValidatorMinUnlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateCommitment",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "generateIPFSCID",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPsuedoTotalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getReward", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getSlashAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorMinimum",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hashModel",
    values: [ModelStruct, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashTask",
    values: [TaskStruct, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateValidatorWithdraw",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minClaimSolutionTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minContestationVotePeriodTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minRetractionWaitTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "models", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorWithdrawRequests",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingValidatorWithdrawRequestsCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "prevhash", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerModel",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retractTask",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "retractionFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reward",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExitValidatorMinUnlockTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinClaimSolutionTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinContestationVotePeriodTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRetractionWaitTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRetractionFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSlashAmountPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolutionFeePercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSolutionMineableRate",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryRewardPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidatorMinimumPercentage",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVersion",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "signalCommitment",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "signalSupport",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "slashAmountPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solutionFeePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "solutions",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startBlockTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitContestation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitSolution",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitTask",
    values: [BigNumberish, string, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "targetTs",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tasks", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferTreasury",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "treasuryRewardPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorDeposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorMinimumPercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "validatorWithdraw",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorWithdrawPendingAmount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "validators", values: [string]): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "voteOnContestation",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAccruedFees",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "accruedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelValidatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commitments",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteNays",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoteYeas",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestationVotedIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contestations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "diffMul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitValidatorMinUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateIPFSCID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPsuedoTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getReward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSlashAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorMinimum",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hashModel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hashTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateValidatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minClaimSolutionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minContestationVotePeriodTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minRetractionWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "models", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingValidatorWithdrawRequestsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "prevhash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerModel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retractTask",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retractionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reward", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setExitValidatorMinUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinClaimSolutionTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinContestationVotePeriodTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRetractionWaitTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRetractionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSlashAmountPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSolutionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSolutionMineableRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidatorMinimumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalCommitment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalSupport",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashAmountPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "solutionFeePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "solutions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitContestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitSolution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "submitTask", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "targetTs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tasks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "treasuryRewardPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorMinimumPercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorWithdrawPendingAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteOnContestation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAccruedFees",
    data: BytesLike
  ): Result;

  events: {
    "ContestationSubmitted(address,bytes32)": EventFragment;
    "ContestationVote(address,bytes32,bool)": EventFragment;
    "ContestationVoteFinish(bytes32,uint32,uint32)": EventFragment;
    "ExitValidatorMinUnlockTimeChanged(uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "MinClaimSolutionTimeChanged(uint256)": EventFragment;
    "MinContestationVotePeriodTimeChanged(uint256)": EventFragment;
    "MinRetractionWaitTimeChanged(uint256)": EventFragment;
    "ModelRegistered(bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RetractionFeePercentageChanged(uint256)": EventFragment;
    "SignalCommitment(address,bytes32)": EventFragment;
    "SignalSupport(address,bytes32,bool)": EventFragment;
    "SlashAmountPercentageChanged(uint256)": EventFragment;
    "SolutionClaimed(address,bytes32)": EventFragment;
    "SolutionFeePercentageChanged(uint256)": EventFragment;
    "SolutionMineableRateChange(bytes32,uint256)": EventFragment;
    "SolutionSubmitted(address,bytes32)": EventFragment;
    "TaskRetracted(bytes32)": EventFragment;
    "TaskSubmitted(bytes32,bytes32,uint256,address)": EventFragment;
    "TreasuryRewardPercentageChanged(uint256)": EventFragment;
    "TreasuryTransferred(address)": EventFragment;
    "ValidatorDeposit(address,address,uint256)": EventFragment;
    "ValidatorMinimumPercentageChanged(uint256)": EventFragment;
    "ValidatorWithdraw(address,address,uint256,uint256)": EventFragment;
    "ValidatorWithdrawCancelled(address,uint256)": EventFragment;
    "ValidatorWithdrawInitiated(address,uint256,uint256,uint256)": EventFragment;
    "VersionChanged(uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContestationSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestationVote"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContestationVoteFinish"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ExitValidatorMinUnlockTimeChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinClaimSolutionTimeChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinContestationVotePeriodTimeChanged"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "MinRetractionWaitTimeChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModelRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RetractionFeePercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalCommitment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignalSupport"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SlashAmountPercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolutionClaimed"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "SolutionFeePercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolutionMineableRateChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SolutionSubmitted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskRetracted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TaskSubmitted"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TreasuryRewardPercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasuryTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorDeposit"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ValidatorMinimumPercentageChanged"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorWithdrawCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ValidatorWithdrawInitiated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionChanged"): EventFragment;
}

export type ContestationSubmittedEvent = TypedEvent<
  [string, string],
  { addr: string; task: string }
>;

export type ContestationSubmittedEventFilter =
  TypedEventFilter<ContestationSubmittedEvent>;

export type ContestationVoteEvent = TypedEvent<
  [string, string, boolean],
  { addr: string; task: string; yea: boolean }
>;

export type ContestationVoteEventFilter =
  TypedEventFilter<ContestationVoteEvent>;

export type ContestationVoteFinishEvent = TypedEvent<
  [string, number, number],
  { id: string; start_idx: number; end_idx: number }
>;

export type ContestationVoteFinishEventFilter =
  TypedEventFilter<ContestationVoteFinishEvent>;

export type ExitValidatorMinUnlockTimeChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ExitValidatorMinUnlockTimeChangedEventFilter =
  TypedEventFilter<ExitValidatorMinUnlockTimeChangedEvent>;

export type InitializedEvent = TypedEvent<[number], { version: number }>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export type MinClaimSolutionTimeChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type MinClaimSolutionTimeChangedEventFilter =
  TypedEventFilter<MinClaimSolutionTimeChangedEvent>;

export type MinContestationVotePeriodTimeChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type MinContestationVotePeriodTimeChangedEventFilter =
  TypedEventFilter<MinContestationVotePeriodTimeChangedEvent>;

export type MinRetractionWaitTimeChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type MinRetractionWaitTimeChangedEventFilter =
  TypedEventFilter<MinRetractionWaitTimeChangedEvent>;

export type ModelRegisteredEvent = TypedEvent<[string], { id: string }>;

export type ModelRegisteredEventFilter = TypedEventFilter<ModelRegisteredEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RetractionFeePercentageChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type RetractionFeePercentageChangedEventFilter =
  TypedEventFilter<RetractionFeePercentageChangedEvent>;

export type SignalCommitmentEvent = TypedEvent<
  [string, string],
  { addr: string; commitment: string }
>;

export type SignalCommitmentEventFilter =
  TypedEventFilter<SignalCommitmentEvent>;

export type SignalSupportEvent = TypedEvent<
  [string, string, boolean],
  { addr: string; model: string; supported: boolean }
>;

export type SignalSupportEventFilter = TypedEventFilter<SignalSupportEvent>;

export type SlashAmountPercentageChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type SlashAmountPercentageChangedEventFilter =
  TypedEventFilter<SlashAmountPercentageChangedEvent>;

export type SolutionClaimedEvent = TypedEvent<
  [string, string],
  { addr: string; task: string }
>;

export type SolutionClaimedEventFilter = TypedEventFilter<SolutionClaimedEvent>;

export type SolutionFeePercentageChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type SolutionFeePercentageChangedEventFilter =
  TypedEventFilter<SolutionFeePercentageChangedEvent>;

export type SolutionMineableRateChangeEvent = TypedEvent<
  [string, BigNumber],
  { id: string; rate: BigNumber }
>;

export type SolutionMineableRateChangeEventFilter =
  TypedEventFilter<SolutionMineableRateChangeEvent>;

export type SolutionSubmittedEvent = TypedEvent<
  [string, string],
  { addr: string; task: string }
>;

export type SolutionSubmittedEventFilter =
  TypedEventFilter<SolutionSubmittedEvent>;

export type TaskRetractedEvent = TypedEvent<[string], { id: string }>;

export type TaskRetractedEventFilter = TypedEventFilter<TaskRetractedEvent>;

export type TaskSubmittedEvent = TypedEvent<
  [string, string, BigNumber, string],
  { id: string; model: string; fee: BigNumber; sender: string }
>;

export type TaskSubmittedEventFilter = TypedEventFilter<TaskSubmittedEvent>;

export type TreasuryRewardPercentageChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type TreasuryRewardPercentageChangedEventFilter =
  TypedEventFilter<TreasuryRewardPercentageChangedEvent>;

export type TreasuryTransferredEvent = TypedEvent<[string], { to: string }>;

export type TreasuryTransferredEventFilter =
  TypedEventFilter<TreasuryTransferredEvent>;

export type ValidatorDepositEvent = TypedEvent<
  [string, string, BigNumber],
  { addr: string; validator: string; amount: BigNumber }
>;

export type ValidatorDepositEventFilter =
  TypedEventFilter<ValidatorDepositEvent>;

export type ValidatorMinimumPercentageChangedEvent = TypedEvent<
  [BigNumber],
  { amount: BigNumber }
>;

export type ValidatorMinimumPercentageChangedEventFilter =
  TypedEventFilter<ValidatorMinimumPercentageChangedEvent>;

export type ValidatorWithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  { addr: string; to: string; count: BigNumber; amount: BigNumber }
>;

export type ValidatorWithdrawEventFilter =
  TypedEventFilter<ValidatorWithdrawEvent>;

export type ValidatorWithdrawCancelledEvent = TypedEvent<
  [string, BigNumber],
  { addr: string; count: BigNumber }
>;

export type ValidatorWithdrawCancelledEventFilter =
  TypedEventFilter<ValidatorWithdrawCancelledEvent>;

export type ValidatorWithdrawInitiatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  { addr: string; count: BigNumber; unlockTime: BigNumber; amount: BigNumber }
>;

export type ValidatorWithdrawInitiatedEventFilter =
  TypedEventFilter<ValidatorWithdrawInitiatedEvent>;

export type VersionChangedEvent = TypedEvent<
  [BigNumber],
  { version: BigNumber }
>;

export type VersionChangedEventFilter = TypedEventFilter<VersionChangedEvent>;

export interface EngineV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EngineV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accruedFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    cancelValidatorWithdraw(
      count_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimSolution(
      taskid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    commitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contestationVoteFinish(
      taskid_: BytesLike,
      amnt_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    contestationVoteNays(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contestationVoteYeas(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    contestationVoted(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    contestationVotedIndex(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    contestations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        validator: string;
        blocktime: BigNumber;
        finish_start_index: number;
      }
    >;

    diffMul(
      t: BigNumberish,
      ts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    generateCommitment(
      sender_: string,
      taskid_: BytesLike,
      cid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateIPFSCID(
      content_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getPsuedoTotalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    getSlashAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getValidatorMinimum(overrides?: CallOverrides): Promise<[BigNumber]>;

    hashModel(
      o_: ModelStruct,
      sender_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashTask(
      o_: TaskStruct,
      sender_: string,
      prevhash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      baseToken_: string,
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initiateValidatorWithdraw(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    minClaimSolutionTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    minRetractionWaitTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    models(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        fee: BigNumber;
        addr: string;
        rate: BigNumber;
        cid: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingValidatorWithdrawRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { unlockTime: BigNumber; amount: BigNumber }
    >;

    pendingValidatorWithdrawRequestsCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    prevhash(overrides?: CallOverrides): Promise<[string]>;

    registerModel(
      addr_: string,
      fee_: BigNumberish,
      template_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retractTask(
      taskid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retractionFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    reward(
      t: BigNumberish,
      ts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setExitValidatorMinUnlockTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinClaimSolutionTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinContestationVotePeriodTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinRetractionWaitTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRetractionFeePercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSlashAmountPercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSolutionFeePercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSolutionMineableRate(
      model_: BytesLike,
      rate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasuryRewardPercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidatorMinimumPercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setVersion(
      version_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalCommitment(
      commitment_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalSupport(
      model_: BytesLike,
      support_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slashAmountPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    solutionFeePercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    solutions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string] & {
        validator: string;
        blocktime: BigNumber;
        claimed: boolean;
        cid: string;
      }
    >;

    startBlockTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    submitContestation(
      taskid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitSolution(
      taskid_: BytesLike,
      cid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    submitTask(
      version_: BigNumberish,
      owner_: string,
      model_: BytesLike,
      fee_: BigNumberish,
      input_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    targetTs(t: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    tasks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, number, string] & {
        model: string;
        fee: BigNumber;
        owner: string;
        blocktime: BigNumber;
        version: number;
        cid: string;
      }
    >;

    transferOwnership(
      to_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferTreasury(
      to_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    treasuryRewardPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorDeposit(
      validator_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validatorMinimumPercentage(overrides?: CallOverrides): Promise<[BigNumber]>;

    validatorWithdraw(
      count_: BigNumberish,
      to_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validatorWithdrawPendingAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { staked: BigNumber; addr: string }>;

    version(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteOnContestation(
      taskid_: BytesLike,
      yea_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawAccruedFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  cancelValidatorWithdraw(
    count_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimSolution(
    taskid_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  contestationVoteFinish(
    taskid_: BytesLike,
    amnt_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  contestationVoteNays(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  contestationVoteYeas(
    arg0: BytesLike,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  contestationVoted(
    arg0: BytesLike,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  contestationVotedIndex(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  contestations(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, number] & {
      validator: string;
      blocktime: BigNumber;
      finish_start_index: number;
    }
  >;

  diffMul(
    t: BigNumberish,
    ts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  generateCommitment(
    sender_: string,
    taskid_: BytesLike,
    cid_: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  generateIPFSCID(
    content_: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getPsuedoTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getReward(overrides?: CallOverrides): Promise<BigNumber>;

  getSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getValidatorMinimum(overrides?: CallOverrides): Promise<BigNumber>;

  hashModel(
    o_: ModelStruct,
    sender_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  hashTask(
    o_: TaskStruct,
    sender_: string,
    prevhash_: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    baseToken_: string,
    treasury_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initiateValidatorWithdraw(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  minClaimSolutionTime(overrides?: CallOverrides): Promise<BigNumber>;

  minContestationVotePeriodTime(overrides?: CallOverrides): Promise<BigNumber>;

  minRetractionWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

  models(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, string, BigNumber, string] & {
      fee: BigNumber;
      addr: string;
      rate: BigNumber;
      cid: string;
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingValidatorWithdrawRequests(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { unlockTime: BigNumber; amount: BigNumber }
  >;

  pendingValidatorWithdrawRequestsCount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  prevhash(overrides?: CallOverrides): Promise<string>;

  registerModel(
    addr_: string,
    fee_: BigNumberish,
    template_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retractTask(
    taskid_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retractionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  reward(
    t: BigNumberish,
    ts: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setExitValidatorMinUnlockTime(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinClaimSolutionTime(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinContestationVotePeriodTime(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinRetractionWaitTime(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRetractionFeePercentage(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSlashAmountPercentage(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSolutionFeePercentage(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSolutionMineableRate(
    model_: BytesLike,
    rate_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasuryRewardPercentage(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidatorMinimumPercentage(
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setVersion(
    version_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalCommitment(
    commitment_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalSupport(
    model_: BytesLike,
    support_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slashAmountPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  solutionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  solutions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, boolean, string] & {
      validator: string;
      blocktime: BigNumber;
      claimed: boolean;
      cid: string;
    }
  >;

  startBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

  submitContestation(
    taskid_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitSolution(
    taskid_: BytesLike,
    cid_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  submitTask(
    version_: BigNumberish,
    owner_: string,
    model_: BytesLike,
    fee_: BigNumberish,
    input_: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  targetTs(t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  tasks(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, string, BigNumber, number, string] & {
      model: string;
      fee: BigNumber;
      owner: string;
      blocktime: BigNumber;
      version: number;
      cid: string;
    }
  >;

  transferOwnership(
    to_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferTreasury(
    to_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  treasury(overrides?: CallOverrides): Promise<string>;

  treasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  validatorDeposit(
    validator_: string,
    amount_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validatorMinimumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

  validatorWithdraw(
    count_: BigNumberish,
    to_: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validatorWithdrawPendingAmount(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  validators(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { staked: BigNumber; addr: string }>;

  version(overrides?: CallOverrides): Promise<BigNumber>;

  voteOnContestation(
    taskid_: BytesLike,
    yea_: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawAccruedFees(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    cancelValidatorWithdraw(
      count_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claimSolution(taskid_: BytesLike, overrides?: CallOverrides): Promise<void>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    contestationVoteFinish(
      taskid_: BytesLike,
      amnt_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    contestationVoteNays(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    contestationVoteYeas(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    contestationVoted(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    contestationVotedIndex(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, number] & {
        validator: string;
        blocktime: BigNumber;
        finish_start_index: number;
      }
    >;

    diffMul(
      t: BigNumberish,
      ts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    generateCommitment(
      sender_: string,
      taskid_: BytesLike,
      cid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    generateIPFSCID(
      content_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getPsuedoTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    getSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    hashModel(
      o_: ModelStruct,
      sender_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    hashTask(
      o_: TaskStruct,
      sender_: string,
      prevhash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      baseToken_: string,
      treasury_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateValidatorWithdraw(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minClaimSolutionTime(overrides?: CallOverrides): Promise<BigNumber>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minRetractionWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    models(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, string, BigNumber, string] & {
        fee: BigNumber;
        addr: string;
        rate: BigNumber;
        cid: string;
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingValidatorWithdrawRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { unlockTime: BigNumber; amount: BigNumber }
    >;

    pendingValidatorWithdrawRequestsCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevhash(overrides?: CallOverrides): Promise<string>;

    registerModel(
      addr_: string,
      fee_: BigNumberish,
      template_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retractTask(taskid_: BytesLike, overrides?: CallOverrides): Promise<void>;

    retractionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reward(
      t: BigNumberish,
      ts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExitValidatorMinUnlockTime(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinClaimSolutionTime(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinContestationVotePeriodTime(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRetractionWaitTime(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRetractionFeePercentage(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSlashAmountPercentage(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolutionFeePercentage(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSolutionMineableRate(
      model_: BytesLike,
      rate_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasuryRewardPercentage(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setValidatorMinimumPercentage(
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setVersion(
      version_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    signalCommitment(
      commitment_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    signalSupport(
      model_: BytesLike,
      support_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    slashAmountPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, boolean, string] & {
        validator: string;
        blocktime: BigNumber;
        claimed: boolean;
        cid: string;
      }
    >;

    startBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitContestation(
      taskid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitSolution(
      taskid_: BytesLike,
      cid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    submitTask(
      version_: BigNumberish,
      owner_: string,
      model_: BytesLike,
      fee_: BigNumberish,
      input_: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    targetTs(t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tasks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, string, BigNumber, number, string] & {
        model: string;
        fee: BigNumber;
        owner: string;
        blocktime: BigNumber;
        version: number;
        cid: string;
      }
    >;

    transferOwnership(to_: string, overrides?: CallOverrides): Promise<void>;

    transferTreasury(to_: string, overrides?: CallOverrides): Promise<void>;

    treasury(overrides?: CallOverrides): Promise<string>;

    treasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorDeposit(
      validator_: string,
      amount_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorMinimumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorWithdraw(
      count_: BigNumberish,
      to_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validatorWithdrawPendingAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { staked: BigNumber; addr: string }>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voteOnContestation(
      taskid_: BytesLike,
      yea_: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawAccruedFees(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "ContestationSubmitted(address,bytes32)"(
      addr?: string | null,
      task?: BytesLike | null
    ): ContestationSubmittedEventFilter;
    ContestationSubmitted(
      addr?: string | null,
      task?: BytesLike | null
    ): ContestationSubmittedEventFilter;

    "ContestationVote(address,bytes32,bool)"(
      addr?: string | null,
      task?: BytesLike | null,
      yea?: null
    ): ContestationVoteEventFilter;
    ContestationVote(
      addr?: string | null,
      task?: BytesLike | null,
      yea?: null
    ): ContestationVoteEventFilter;

    "ContestationVoteFinish(bytes32,uint32,uint32)"(
      id?: BytesLike | null,
      start_idx?: BigNumberish | null,
      end_idx?: null
    ): ContestationVoteFinishEventFilter;
    ContestationVoteFinish(
      id?: BytesLike | null,
      start_idx?: BigNumberish | null,
      end_idx?: null
    ): ContestationVoteFinishEventFilter;

    "ExitValidatorMinUnlockTimeChanged(uint256)"(
      amount?: BigNumberish | null
    ): ExitValidatorMinUnlockTimeChangedEventFilter;
    ExitValidatorMinUnlockTimeChanged(
      amount?: BigNumberish | null
    ): ExitValidatorMinUnlockTimeChangedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "MinClaimSolutionTimeChanged(uint256)"(
      amount?: BigNumberish | null
    ): MinClaimSolutionTimeChangedEventFilter;
    MinClaimSolutionTimeChanged(
      amount?: BigNumberish | null
    ): MinClaimSolutionTimeChangedEventFilter;

    "MinContestationVotePeriodTimeChanged(uint256)"(
      amount?: BigNumberish | null
    ): MinContestationVotePeriodTimeChangedEventFilter;
    MinContestationVotePeriodTimeChanged(
      amount?: BigNumberish | null
    ): MinContestationVotePeriodTimeChangedEventFilter;

    "MinRetractionWaitTimeChanged(uint256)"(
      amount?: BigNumberish | null
    ): MinRetractionWaitTimeChangedEventFilter;
    MinRetractionWaitTimeChanged(
      amount?: BigNumberish | null
    ): MinRetractionWaitTimeChangedEventFilter;

    "ModelRegistered(bytes32)"(
      id?: BytesLike | null
    ): ModelRegisteredEventFilter;
    ModelRegistered(id?: BytesLike | null): ModelRegisteredEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RetractionFeePercentageChanged(uint256)"(
      amount?: BigNumberish | null
    ): RetractionFeePercentageChangedEventFilter;
    RetractionFeePercentageChanged(
      amount?: BigNumberish | null
    ): RetractionFeePercentageChangedEventFilter;

    "SignalCommitment(address,bytes32)"(
      addr?: string | null,
      commitment?: BytesLike | null
    ): SignalCommitmentEventFilter;
    SignalCommitment(
      addr?: string | null,
      commitment?: BytesLike | null
    ): SignalCommitmentEventFilter;

    "SignalSupport(address,bytes32,bool)"(
      addr?: string | null,
      model?: BytesLike | null,
      supported?: null
    ): SignalSupportEventFilter;
    SignalSupport(
      addr?: string | null,
      model?: BytesLike | null,
      supported?: null
    ): SignalSupportEventFilter;

    "SlashAmountPercentageChanged(uint256)"(
      amount?: BigNumberish | null
    ): SlashAmountPercentageChangedEventFilter;
    SlashAmountPercentageChanged(
      amount?: BigNumberish | null
    ): SlashAmountPercentageChangedEventFilter;

    "SolutionClaimed(address,bytes32)"(
      addr?: string | null,
      task?: BytesLike | null
    ): SolutionClaimedEventFilter;
    SolutionClaimed(
      addr?: string | null,
      task?: BytesLike | null
    ): SolutionClaimedEventFilter;

    "SolutionFeePercentageChanged(uint256)"(
      amount?: BigNumberish | null
    ): SolutionFeePercentageChangedEventFilter;
    SolutionFeePercentageChanged(
      amount?: BigNumberish | null
    ): SolutionFeePercentageChangedEventFilter;

    "SolutionMineableRateChange(bytes32,uint256)"(
      id?: BytesLike | null,
      rate?: null
    ): SolutionMineableRateChangeEventFilter;
    SolutionMineableRateChange(
      id?: BytesLike | null,
      rate?: null
    ): SolutionMineableRateChangeEventFilter;

    "SolutionSubmitted(address,bytes32)"(
      addr?: string | null,
      task?: BytesLike | null
    ): SolutionSubmittedEventFilter;
    SolutionSubmitted(
      addr?: string | null,
      task?: BytesLike | null
    ): SolutionSubmittedEventFilter;

    "TaskRetracted(bytes32)"(id?: BytesLike | null): TaskRetractedEventFilter;
    TaskRetracted(id?: BytesLike | null): TaskRetractedEventFilter;

    "TaskSubmitted(bytes32,bytes32,uint256,address)"(
      id?: BytesLike | null,
      model?: BytesLike | null,
      fee?: null,
      sender?: string | null
    ): TaskSubmittedEventFilter;
    TaskSubmitted(
      id?: BytesLike | null,
      model?: BytesLike | null,
      fee?: null,
      sender?: string | null
    ): TaskSubmittedEventFilter;

    "TreasuryRewardPercentageChanged(uint256)"(
      amount?: BigNumberish | null
    ): TreasuryRewardPercentageChangedEventFilter;
    TreasuryRewardPercentageChanged(
      amount?: BigNumberish | null
    ): TreasuryRewardPercentageChangedEventFilter;

    "TreasuryTransferred(address)"(
      to?: string | null
    ): TreasuryTransferredEventFilter;
    TreasuryTransferred(to?: string | null): TreasuryTransferredEventFilter;

    "ValidatorDeposit(address,address,uint256)"(
      addr?: string | null,
      validator?: string | null,
      amount?: null
    ): ValidatorDepositEventFilter;
    ValidatorDeposit(
      addr?: string | null,
      validator?: string | null,
      amount?: null
    ): ValidatorDepositEventFilter;

    "ValidatorMinimumPercentageChanged(uint256)"(
      amount?: BigNumberish | null
    ): ValidatorMinimumPercentageChangedEventFilter;
    ValidatorMinimumPercentageChanged(
      amount?: BigNumberish | null
    ): ValidatorMinimumPercentageChangedEventFilter;

    "ValidatorWithdraw(address,address,uint256,uint256)"(
      addr?: string | null,
      to?: string | null,
      count?: BigNumberish | null,
      amount?: null
    ): ValidatorWithdrawEventFilter;
    ValidatorWithdraw(
      addr?: string | null,
      to?: string | null,
      count?: BigNumberish | null,
      amount?: null
    ): ValidatorWithdrawEventFilter;

    "ValidatorWithdrawCancelled(address,uint256)"(
      addr?: string | null,
      count?: BigNumberish | null
    ): ValidatorWithdrawCancelledEventFilter;
    ValidatorWithdrawCancelled(
      addr?: string | null,
      count?: BigNumberish | null
    ): ValidatorWithdrawCancelledEventFilter;

    "ValidatorWithdrawInitiated(address,uint256,uint256,uint256)"(
      addr?: string | null,
      count?: BigNumberish | null,
      unlockTime?: null,
      amount?: null
    ): ValidatorWithdrawInitiatedEventFilter;
    ValidatorWithdrawInitiated(
      addr?: string | null,
      count?: BigNumberish | null,
      unlockTime?: null,
      amount?: null
    ): ValidatorWithdrawInitiatedEventFilter;

    "VersionChanged(uint256)"(version?: null): VersionChangedEventFilter;
    VersionChanged(version?: null): VersionChangedEventFilter;
  };

  estimateGas: {
    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    cancelValidatorWithdraw(
      count_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimSolution(
      taskid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    commitments(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    contestationVoteFinish(
      taskid_: BytesLike,
      amnt_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    contestationVoteNays(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoteYeas(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVoted(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestationVotedIndex(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    contestations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    diffMul(
      t: BigNumberish,
      ts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exitValidatorMinUnlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    generateCommitment(
      sender_: string,
      taskid_: BytesLike,
      cid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateIPFSCID(
      content_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPsuedoTotalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getReward(overrides?: CallOverrides): Promise<BigNumber>;

    getSlashAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getValidatorMinimum(overrides?: CallOverrides): Promise<BigNumber>;

    hashModel(
      o_: ModelStruct,
      sender_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashTask(
      o_: TaskStruct,
      sender_: string,
      prevhash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      baseToken_: string,
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initiateValidatorWithdraw(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    minClaimSolutionTime(overrides?: CallOverrides): Promise<BigNumber>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minRetractionWaitTime(overrides?: CallOverrides): Promise<BigNumber>;

    models(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingValidatorWithdrawRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pendingValidatorWithdrawRequestsCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    prevhash(overrides?: CallOverrides): Promise<BigNumber>;

    registerModel(
      addr_: string,
      fee_: BigNumberish,
      template_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retractTask(
      taskid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retractionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    reward(
      t: BigNumberish,
      ts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setExitValidatorMinUnlockTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinClaimSolutionTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinContestationVotePeriodTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinRetractionWaitTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRetractionFeePercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSlashAmountPercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSolutionFeePercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSolutionMineableRate(
      model_: BytesLike,
      rate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasuryRewardPercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidatorMinimumPercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setVersion(
      version_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalCommitment(
      commitment_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalSupport(
      model_: BytesLike,
      support_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slashAmountPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutionFeePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    solutions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    startBlockTime(overrides?: CallOverrides): Promise<BigNumber>;

    submitContestation(
      taskid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitSolution(
      taskid_: BytesLike,
      cid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    submitTask(
      version_: BigNumberish,
      owner_: string,
      model_: BytesLike,
      fee_: BigNumberish,
      input_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    targetTs(t: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    tasks(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      to_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferTreasury(
      to_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    treasuryRewardPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorDeposit(
      validator_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validatorMinimumPercentage(overrides?: CallOverrides): Promise<BigNumber>;

    validatorWithdraw(
      count_: BigNumberish,
      to_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validatorWithdrawPendingAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    voteOnContestation(
      taskid_: BytesLike,
      yea_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawAccruedFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accruedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cancelValidatorWithdraw(
      count_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimSolution(
      taskid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    commitments(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVoteFinish(
      taskid_: BytesLike,
      amnt_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    contestationVoteNays(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVoteYeas(
      arg0: BytesLike,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVoted(
      arg0: BytesLike,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestationVotedIndex(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    contestations(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    diffMul(
      t: BigNumberish,
      ts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exitValidatorMinUnlockTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateCommitment(
      sender_: string,
      taskid_: BytesLike,
      cid_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateIPFSCID(
      content_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPsuedoTotalSupply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSlashAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getValidatorMinimum(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashModel(
      o_: ModelStruct,
      sender_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashTask(
      o_: TaskStruct,
      sender_: string,
      prevhash_: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      baseToken_: string,
      treasury_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initiateValidatorWithdraw(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    minClaimSolutionTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minContestationVotePeriodTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minRetractionWaitTime(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    models(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingValidatorWithdrawRequests(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingValidatorWithdrawRequestsCount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    prevhash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerModel(
      addr_: string,
      fee_: BigNumberish,
      template_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retractTask(
      taskid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retractionFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reward(
      t: BigNumberish,
      ts: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setExitValidatorMinUnlockTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinClaimSolutionTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinContestationVotePeriodTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinRetractionWaitTime(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRetractionFeePercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSlashAmountPercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSolutionFeePercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSolutionMineableRate(
      model_: BytesLike,
      rate_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasuryRewardPercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidatorMinimumPercentage(
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setVersion(
      version_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalCommitment(
      commitment_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalSupport(
      model_: BytesLike,
      support_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slashAmountPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutionFeePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    solutions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startBlockTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    submitContestation(
      taskid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitSolution(
      taskid_: BytesLike,
      cid_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    submitTask(
      version_: BigNumberish,
      owner_: string,
      model_: BytesLike,
      fee_: BigNumberish,
      input_: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    targetTs(
      t: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tasks(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      to_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferTreasury(
      to_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasuryRewardPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorDeposit(
      validator_: string,
      amount_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validatorMinimumPercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validatorWithdraw(
      count_: BigNumberish,
      to_: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validatorWithdrawPendingAmount(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voteOnContestation(
      taskid_: BytesLike,
      yea_: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawAccruedFees(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
