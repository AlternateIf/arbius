{
  "manifestVersion": "3.2",
  "admin": {
    "address": "0x1acF2B5Ed70E039aBb9f7D97563D5277edF7fe84",
    "txHash": "0x91a2025509b34ea8bb79e6017565e78473811b855f4b175151ab6b642dd64f7e"
  },
  "proxies": [
    {
      "address": "0x3Af833B400a32c48f947a64000cB4Bac98aEC87f",
      "txHash": "0xdb6ae7120944e7364ab38e08785b5dd4661357f34d3e75a689fe702b5c69ce68",
      "kind": "transparent"
    },
    {
      "address": "0x65bc2fdCEE99bB54c8535299Bc401eEbe32f5965",
      "txHash": "0xd72b082327b2045b0955e0cba26e61fec51e87821ac886da2888ef1114a952c4",
      "kind": "transparent"
    },
    {
      "address": "0xB8f25b34Cf0a4492027f6294A0fc8b3aC7c95e27",
      "txHash": "0xb86dc35ef3a704023ee5f9920a94b29812e63547ac33431e27fc5bcaa7808ef7",
      "kind": "transparent"
    },
    {
      "address": "0x71513F3CBB1EA8c933082873A9CBF59Aa0EE02d5",
      "txHash": "0x1cf779b5fc6180e2b7397ef11a923c5717b7ef7832eadd615cfc5eac4ae683d9",
      "kind": "transparent"
    },
    {
      "address": "0x0e5b5315071e2c85933438e76d259D69374bbC02",
      "txHash": "0x80ac2c99db3989b18508b01f2e6713f14a90bd96c46c5d13f09e19e7e82b6768",
      "kind": "transparent"
    }
  ],
  "impls": {
    "03ff06a57133a407a7bf0692c5e0af69b59ed523196362ebf0b4f6d7b456afbc": {
      "address": "0xd5b3f9eE88F4c3e79482D32f91e1322B4Df20a42",
      "txHash": "0xbc5a2e9d774dadc795b710dc0d4029486871b7be1a85b46a04a6631d2293e977",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_balances",
            "offset": 0,
            "slot": "51",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:37"
          },
          {
            "label": "_allowances",
            "offset": 0,
            "slot": "52",
            "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:39"
          },
          {
            "label": "_totalSupply",
            "offset": 0,
            "slot": "53",
            "type": "t_uint256",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:41"
          },
          {
            "label": "_name",
            "offset": 0,
            "slot": "54",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
          },
          {
            "label": "_symbol",
            "offset": 0,
            "slot": "55",
            "type": "t_string_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "56",
            "type": "t_array(t_uint256)45_storage",
            "contract": "ERC20Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:400"
          },
          {
            "label": "_HASHED_NAME",
            "offset": 0,
            "slot": "101",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:32"
          },
          {
            "label": "_HASHED_VERSION",
            "offset": 0,
            "slot": "102",
            "type": "t_bytes32",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:33"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "103",
            "type": "t_array(t_uint256)50_storage",
            "contract": "EIP712Upgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol:120"
          },
          {
            "label": "_nonces",
            "offset": 0,
            "slot": "153",
            "type": "t_mapping(t_address,t_struct(Counter)2522_storage)",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
          },
          {
            "label": "_PERMIT_TYPEHASH_DEPRECATED_SLOT",
            "offset": 0,
            "slot": "154",
            "type": "t_bytes32",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:40",
            "renamedFrom": "_PERMIT_TYPEHASH"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "155",
            "type": "t_array(t_uint256)49_storage",
            "contract": "ERC20PermitUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:108"
          },
          {
            "label": "_delegates",
            "offset": 0,
            "slot": "204",
            "type": "t_mapping(t_address,t_address)",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:42"
          },
          {
            "label": "_checkpoints",
            "offset": 0,
            "slot": "205",
            "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1252_storage)dyn_storage)",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:43"
          },
          {
            "label": "_totalSupplyCheckpoints",
            "offset": 0,
            "slot": "206",
            "type": "t_array(t_struct(Checkpoint)1252_storage)dyn_storage",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:44"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "207",
            "type": "t_array(t_uint256)47_storage",
            "contract": "ERC20VotesUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:287"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "254",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "255",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "l2Gateway",
            "offset": 0,
            "slot": "304",
            "type": "t_address",
            "contract": "BaseTokenV1",
            "src": "contracts/BaseTokenV1.sol:18"
          },
          {
            "label": "l1Address",
            "offset": 0,
            "slot": "305",
            "type": "t_address",
            "contract": "BaseTokenV1",
            "src": "contracts/BaseTokenV1.sol:19"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_struct(Checkpoint)1252_storage)dyn_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)45_storage": {
            "label": "uint256[45]",
            "numberOfBytes": "1440"
          },
          "t_array(t_uint256)47_storage": {
            "label": "uint256[47]",
            "numberOfBytes": "1504"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_address)": {
            "label": "mapping(address => address)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_array(t_struct(Checkpoint)1252_storage)dyn_storage)": {
            "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
            "label": "mapping(address => mapping(address => uint256))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Counter)2522_storage)": {
            "label": "mapping(address => struct CountersUpgradeable.Counter)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_string_storage": {
            "label": "string",
            "numberOfBytes": "32"
          },
          "t_struct(Checkpoint)1252_storage": {
            "label": "struct ERC20VotesUpgradeable.Checkpoint",
            "members": [
              {
                "label": "fromBlock",
                "type": "t_uint32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "votes",
                "type": "t_uint224",
                "offset": 4,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Counter)2522_storage": {
            "label": "struct CountersUpgradeable.Counter",
            "members": [
              {
                "label": "_value",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_uint224": {
            "label": "uint224",
            "numberOfBytes": "28"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    },
    "b184d67994b92ef504f174b8b32f22863fe9b0e62aab58b56fd40e563f27805b": {
      "address": "0x12B04E2A5070bbD5fc13E62e80A78007e4c83966",
      "txHash": "0xb54c2343699383fc880c0c952e375b9ac3eaf022d31cfed3b8c224a8ed32e208",
      "layout": {
        "solcVersion": "0.8.19",
        "storage": [
          {
            "label": "_initialized",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:62",
            "retypedFrom": "bool"
          },
          {
            "label": "_initializing",
            "offset": 1,
            "slot": "0",
            "type": "t_bool",
            "contract": "Initializable",
            "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:67"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)50_storage",
            "contract": "ContextUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:36"
          },
          {
            "label": "_owner",
            "offset": 0,
            "slot": "51",
            "type": "t_address",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:22"
          },
          {
            "label": "__gap",
            "offset": 0,
            "slot": "52",
            "type": "t_array(t_uint256)49_storage",
            "contract": "OwnableUpgradeable",
            "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:94"
          },
          {
            "label": "baseToken",
            "offset": 0,
            "slot": "101",
            "type": "t_contract(IBaseToken)11740",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:67"
          },
          {
            "label": "treasury",
            "offset": 0,
            "slot": "102",
            "type": "t_address",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:69"
          },
          {
            "label": "accruedFees",
            "offset": 0,
            "slot": "103",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:71"
          },
          {
            "label": "prevhash",
            "offset": 0,
            "slot": "104",
            "type": "t_bytes32",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:73"
          },
          {
            "label": "startBlockTime",
            "offset": 0,
            "slot": "105",
            "type": "t_uint64",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:75"
          },
          {
            "label": "version",
            "offset": 0,
            "slot": "106",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:77"
          },
          {
            "label": "validatorMinimumPercentage",
            "offset": 0,
            "slot": "107",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:79"
          },
          {
            "label": "slashAmountPercentage",
            "offset": 0,
            "slot": "108",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:81"
          },
          {
            "label": "solutionFeePercentage",
            "offset": 0,
            "slot": "109",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:83"
          },
          {
            "label": "retractionFeePercentage",
            "offset": 0,
            "slot": "110",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:85"
          },
          {
            "label": "treasuryRewardPercentage",
            "offset": 0,
            "slot": "111",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:87"
          },
          {
            "label": "minClaimSolutionTime",
            "offset": 0,
            "slot": "112",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:89"
          },
          {
            "label": "minRetractionWaitTime",
            "offset": 0,
            "slot": "113",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:91"
          },
          {
            "label": "minContestationVotePeriodTime",
            "offset": 0,
            "slot": "114",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:93"
          },
          {
            "label": "exitValidatorMinUnlockTime",
            "offset": 0,
            "slot": "115",
            "type": "t_uint256",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:95"
          },
          {
            "label": "models",
            "offset": 0,
            "slot": "116",
            "type": "t_mapping(t_bytes32,t_struct(Model)7850_storage)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:98"
          },
          {
            "label": "validators",
            "offset": 0,
            "slot": "117",
            "type": "t_mapping(t_address,t_struct(Validator)7855_storage)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:100"
          },
          {
            "label": "pendingValidatorWithdrawRequestsCount",
            "offset": 0,
            "slot": "118",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:103"
          },
          {
            "label": "pendingValidatorWithdrawRequests",
            "offset": 0,
            "slot": "119",
            "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(PendingValidatorWithdrawRequest)7860_storage))",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:106"
          },
          {
            "label": "validatorWithdrawPendingAmount",
            "offset": 0,
            "slot": "120",
            "type": "t_mapping(t_address,t_uint256)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:111"
          },
          {
            "label": "tasks",
            "offset": 0,
            "slot": "121",
            "type": "t_mapping(t_bytes32,t_struct(Task)7873_storage)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:114"
          },
          {
            "label": "commitments",
            "offset": 0,
            "slot": "122",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:118"
          },
          {
            "label": "solutions",
            "offset": 0,
            "slot": "123",
            "type": "t_mapping(t_bytes32,t_struct(Solution)7882_storage)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:121"
          },
          {
            "label": "contestations",
            "offset": 0,
            "slot": "124",
            "type": "t_mapping(t_bytes32,t_struct(Contestation)7889_storage)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:124"
          },
          {
            "label": "contestationVoted",
            "offset": 0,
            "slot": "125",
            "type": "t_mapping(t_bytes32,t_mapping(t_address,t_bool))",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:126"
          },
          {
            "label": "contestationVotedIndex",
            "offset": 0,
            "slot": "126",
            "type": "t_mapping(t_bytes32,t_uint256)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:127"
          },
          {
            "label": "contestationVoteYeas",
            "offset": 0,
            "slot": "127",
            "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:128"
          },
          {
            "label": "contestationVoteNays",
            "offset": 0,
            "slot": "128",
            "type": "t_mapping(t_bytes32,t_array(t_address)dyn_storage)",
            "contract": "EngineV1",
            "src": "contracts/EngineV1.sol:129"
          }
        ],
        "types": {
          "t_address": {
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_array(t_address)dyn_storage": {
            "label": "address[]",
            "numberOfBytes": "32"
          },
          "t_array(t_uint256)49_storage": {
            "label": "uint256[49]",
            "numberOfBytes": "1568"
          },
          "t_array(t_uint256)50_storage": {
            "label": "uint256[50]",
            "numberOfBytes": "1600"
          },
          "t_bool": {
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_bytes32": {
            "label": "bytes32",
            "numberOfBytes": "32"
          },
          "t_bytes_storage": {
            "label": "bytes",
            "numberOfBytes": "32"
          },
          "t_contract(IBaseToken)11740": {
            "label": "contract IBaseToken",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "label": "mapping(address => bool)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_mapping(t_uint256,t_struct(PendingValidatorWithdrawRequest)7860_storage))": {
            "label": "mapping(address => mapping(uint256 => struct PendingValidatorWithdrawRequest))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_struct(Validator)7855_storage)": {
            "label": "mapping(address => struct Validator)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_address,t_uint256)": {
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_array(t_address)dyn_storage)": {
            "label": "mapping(bytes32 => address[])",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_mapping(t_address,t_bool))": {
            "label": "mapping(bytes32 => mapping(address => bool))",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(Contestation)7889_storage)": {
            "label": "mapping(bytes32 => struct Contestation)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(Model)7850_storage)": {
            "label": "mapping(bytes32 => struct Model)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(Solution)7882_storage)": {
            "label": "mapping(bytes32 => struct Solution)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_struct(Task)7873_storage)": {
            "label": "mapping(bytes32 => struct Task)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_bytes32,t_uint256)": {
            "label": "mapping(bytes32 => uint256)",
            "numberOfBytes": "32"
          },
          "t_mapping(t_uint256,t_struct(PendingValidatorWithdrawRequest)7860_storage)": {
            "label": "mapping(uint256 => struct PendingValidatorWithdrawRequest)",
            "numberOfBytes": "32"
          },
          "t_struct(Contestation)7889_storage": {
            "label": "struct Contestation",
            "members": [
              {
                "label": "validator",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "blocktime",
                "type": "t_uint64",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "finish_start_index",
                "type": "t_uint32",
                "offset": 28,
                "slot": "0"
              }
            ],
            "numberOfBytes": "32"
          },
          "t_struct(Model)7850_storage": {
            "label": "struct Model",
            "members": [
              {
                "label": "fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "addr",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "rate",
                "type": "t_uint256",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "cid",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(PendingValidatorWithdrawRequest)7860_storage": {
            "label": "struct PendingValidatorWithdrawRequest",
            "members": [
              {
                "label": "unlockTime",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "amount",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Solution)7882_storage": {
            "label": "struct Solution",
            "members": [
              {
                "label": "validator",
                "type": "t_address",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "blocktime",
                "type": "t_uint64",
                "offset": 20,
                "slot": "0"
              },
              {
                "label": "claimed",
                "type": "t_bool",
                "offset": 28,
                "slot": "0"
              },
              {
                "label": "cid",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_struct(Task)7873_storage": {
            "label": "struct Task",
            "members": [
              {
                "label": "model",
                "type": "t_bytes32",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "fee",
                "type": "t_uint256",
                "offset": 0,
                "slot": "1"
              },
              {
                "label": "owner",
                "type": "t_address",
                "offset": 0,
                "slot": "2"
              },
              {
                "label": "blocktime",
                "type": "t_uint64",
                "offset": 20,
                "slot": "2"
              },
              {
                "label": "version",
                "type": "t_uint8",
                "offset": 28,
                "slot": "2"
              },
              {
                "label": "cid",
                "type": "t_bytes_storage",
                "offset": 0,
                "slot": "3"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_struct(Validator)7855_storage": {
            "label": "struct Validator",
            "members": [
              {
                "label": "staked",
                "type": "t_uint256",
                "offset": 0,
                "slot": "0"
              },
              {
                "label": "addr",
                "type": "t_address",
                "offset": 0,
                "slot": "1"
              }
            ],
            "numberOfBytes": "64"
          },
          "t_uint256": {
            "label": "uint256",
            "numberOfBytes": "32"
          },
          "t_uint32": {
            "label": "uint32",
            "numberOfBytes": "4"
          },
          "t_uint64": {
            "label": "uint64",
            "numberOfBytes": "8"
          },
          "t_uint8": {
            "label": "uint8",
            "numberOfBytes": "1"
          }
        }
      }
    }
  }
}
