import Link from 'next/link';
import { useState, useEffect } from 'react';
import { Disclosure, Transition } from '@headlessui/react'
import {
  useAccount,
  useContractRead,
  useContractReads,
} from 'wagmi';
import { ethers } from 'ethers'
import Layout from '@/components/Layout';
import GetDMLButton from '@/components/GetDMLButton';
import { MinusSmallIcon, PlusSmallIcon } from '@heroicons/react/24/outline'
import ConnectWallet from '@/components/ConnectWallet';
import TokenBalance from '@/components/TokenBalance';
import DelegationItemDetails from '@/components/DelegationItemDetails';
import Engine from '@/artifacts/EngineV1.sol/EngineV1.json';
import DelegatedValidatorDeployer from '@/artifacts/DelegatedValidatorDeployerV1.sol/DelegatedValidatorDeployerV1.json';
import DelegatedValidator from '@/artifacts/DelegatedValidatorV1.sol/DelegatedValidatorV1.json';
import Config from '@/config.json';

interface Validator {
  staked: ethers.BigNumber;
  addr: string;
}

interface DelegateItem {
  representative: `0x${string}`;
  miner: `0x${string}`;
  staked: ethers.BigNumber;
  pendingWithdraw: ethers.BigNumber;
  stakedDiplay: string;
  deposits: ethers.BigNumber;
  depositsDisplay: string;
}

export default function DelegationPage() {
  const { address } = useAccount();
  const [walletConnected, setWalletConnected] = useState(false);
  const [delegationList, setDelegationList] = useState([] as DelegateItem[]);

  const {
    data: representativesLength,
    isError: representativesLengthIsError,
    isLoading: representativesLengthIsLoading,
  } = useContractRead({
    address: Config.delegatedValidatorDeployerAddress as `0x${string}`,
    abi: DelegatedValidatorDeployer.abi,
    functionName: 'representativesLength',
  });

  let iota = [];
  if (representativesLength) {
    for (let i=0; i<parseInt((representativesLength as ethers.BigNumber).toString()); ++i) {
      iota.push(i);
    }
  }

  const {
    data: representatives,
    isError: representativesIsError,
    isLoading: representativesIsLoading,
  } = useContractReads({
    contracts: iota.map((n) => ({
      address: Config.delegatedValidatorDeployerAddress as `0x${string}`,
      abi: DelegatedValidatorDeployer.abi,
      functionName: 'representatives',
      args: [n],
    })),
    enabled: ! representativesLengthIsLoading && ! representativesLengthIsError,
  });

  const {
    data: miners,
    isError: minersIsError,
    isLoading: minersIsLoading,
  } = useContractReads({
    contracts: representatives?.map((addr) => ({
      address: Config.delegatedValidatorDeployerAddress as `0x${string}`,
      abi: DelegatedValidatorDeployer.abi,
      functionName: 'representativesOwners',
      args: [addr],
    })),
    enabled: Boolean(representatives),
  });

  const {
    data: deposits,
    isError: depositsIsError,
    isLoading: depositsIsLoading,
  } = useContractReads({
    contracts: representatives?.map((addr) => ({
      address: addr as `0x${string}`,
      abi: DelegatedValidator.abi,
      functionName: 'depositOf',
      args: [address],
    })),
    enabled: Boolean(representatives),
  });

  const {
    data: validators,
    isError: validatorsIsError,
    isLoading: validatorsIsLoading,
  } = useContractReads({
    contracts: representatives?.map((addr) => ({
      address: Config.engineAddress as `0x${string}`,
      abi: Engine.abi,
      functionName: 'validators',
      args: [addr],
    })),
    enabled: Boolean(representatives),
  });

  const {
    data: validatorWithdrawPendingAmount,
    isError: validatorWithdrawPendingAmountIsError,
    isLoading: validatorWithdrawPendingAmountIsLoading,
  } = useContractReads({
    contracts: representatives?.map((addr) => ({
      address: Config.engineAddress as `0x${string}`,
      abi: Engine.abi,
      functionName: 'validatorWithdrawPendingAmount',
      args: [addr],
    })),
    enabled: Boolean(representatives),
  });
      

  useEffect(() => {
    if (! representatives
     || ! miners
     || ! deposits
     || ! validators
     || ! validatorWithdrawPendingAmount
    ) {
      return;
    }

    const items: DelegateItem[] = [];

    for (let i=0;
       i < representatives.length
    && i < deposits.length
    && i < miners.length
    && i < validators.length
    && i < validatorWithdrawPendingAmount.length;
         ++i
    ) {
      console.log('DEPOSIT', deposits[i]);
      const balance = (validators[i] as Validator).staked.sub(validatorWithdrawPendingAmount[i] as ethers.BigNumber);
      const balanceRemainder = balance.mod(1e14);

      const depositsRemainder = (deposits[i] as ethers.BigNumber || ethers.BigNumber.from(0)).mod(1e14);

      items.push({
        representative: representatives[i] as `0x${string}`,
        miner: miners[i] as `0x${string}`,
        staked: (validators[i] as Validator).staked,
        pendingWithdraw: validatorWithdrawPendingAmount[i] as ethers.BigNumber,
        stakedDiplay: ethers.utils.formatEther(balance.sub(balanceRemainder)),
        deposits: deposits[i] as ethers.BigNumber,
        depositsDisplay: ethers.utils.formatEther((deposits[i] as ethers.BigNumber || ethers.BigNumber.from(0)).sub(depositsRemainder)),
      });
    }

    setDelegationList(items);
    console.log('items', items);

    console.log('representativesLength', representativesLength);
    console.log('representatives', representatives);
    console.log('miners', miners);
    console.log('validators', validators);
    console.log('validatorWithdrawPendingAmount', validatorWithdrawPendingAmount);
  }, [representatives, miners, deposits, validators, validatorWithdrawPendingAmount]);

  function shorten(account: string, w: number = 4) {
    return `${account.substring(0, 2+w)}..${account.substring(account.length - w)}`;
  }


  return (
    <Layout title="Delegation">
      <main>
        <div className="sm:rounded-lg">
          <div className="px-4 py-5 sm:p-6">
            <div className="mx-auto max-w-7xl">
              <h1 className="text-3xl font-bold leading-tight tracking-tight text-gray-900">
                Delegation
              </h1>
            </div>
            <div className="mt-2 max-w-xl text-sm text-gray-500">
              <p>
                Delegate DML to participating miners to receive pro-rata share of fees and rewards generated.
              </p>
            </div>
            <div className="mt-8 w-full">
              <div className="flex justify-begin space-x-4">
                <GetDMLButton />
              </div>
            </div>

            <div className="mt-8">
              <ConnectWallet
                update={setWalletConnected}
              />
              { walletConnected && (
                <>
                  <div className="">
                    <div className="sm:flex sm:items-center">
                      <div className="sm:flex-auto">
                        <h1 className="text-base font-semibold leading-6 text-gray-900">
                          Delegates
                        </h1>
                      </div>
                    </div>
                    <div className="mx-1 mt-8 md:mx-0">
                      <table className="min-w-full divide-y divide-gray-300">
                        <thead>
                          <tr>
                            <th scope="col" className="py-3.5 sm:px-3 text-left text-sm font-semibold text-gray-900">
                              Address
                            </th>
                            <th
                              scope="col"
                              className="hidden md:table-cell sm:px-3 md:px-0 py-3.5 text-left text-sm font-semibold text-gray-900"
                            >
                              Miner
                            </th>
                            <th
                              scope="col"
                              className="sm:px-3 py-3.5 text-left text-sm font-semibold text-gray-900"
                            >
                              Balance
                            </th>
                            <th scope="col" className="relative py-3.5 pl-3 pr-4 sm:pr-0">
                              <span className="sr-only">Deposit</span>
                            </th>
                          </tr>
                        </thead>
                        {delegationList.map((item) => (
                          <Disclosure as="tbody" key={item.representative}>
                            {({ open }) => (
                              <>
                                <tr>
                                  <td className="sm:px-3 py-4 text-sm text-gray-500 md:table-cell">
                                    <a href={`https://nova.arbiscan.io/address/${item.representative}`}>{shorten(item.representative)}</a>
                                  </td>
                                  <td className="hidden sm:px-3 md:px-0 py-4 text-sm text-gray-500 md:table-cell">
                                    <a href={`https://nova.arbiscan.io/address/${item.miner}`}>{shorten(item.miner)}</a>
                                  </td>
                                  <td className="sm:px-3 py-4 text-sm text-gray-500">
                                    {item.stakedDiplay} <strong>/</strong> {item.depositsDisplay}
                                  </td>
                                  <td className="py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-0">
                                    <Disclosure.Button
                                      className="flex w-full items-start justify-between text-left text-gray-900"
                                    >
                                      {open ? (
                                        <MinusSmallIcon className="h-6 w-6" aria-hidden="true" />
                                      ) : (
                                        <PlusSmallIcon className="h-6 w-6" aria-hidden="true" />
                                      )}
                                    </Disclosure.Button>
                                  </td>
                                </tr>
  
                                <tr>
                                  <td colSpan={8} className="pb-4">
                                    <Transition
                                      enter="transition ease duration-200 transform"
                                      enterFrom="opacity-0 -translate-y-1"
                                      enterTo="opacity-100 translate-y-0"
                                      leave="transition ease duration-100 transform"
                                      leaveFrom="opacity-100 translate-y-0"
                                      leaveTo="opacity-0 -translate-y-1"
                                    >
                                      <Disclosure.Panel>
                                        <DelegationItemDetails
                                          representative={item.representative}
                                        />
                                      </Disclosure.Panel>
                                    </Transition>
                                  </td>
                                </tr>
                              </>
                            )}
                          </Disclosure>
                        ))}
                      </table>
                    </div>
                  </div>
                </>
              ) }
            </div>
          </div>
        </div>
      </main>
    </Layout>
  )
}

